name: CI

on:
  push:
    branches:
      - master
    tags:
      - "*"
    paths:
      - "**.py"
      - "!indexpy/__version__.py"
  pull_request:
    branches:
      - master
    paths:
      - "**.py"
      - "!indexpy/__version__.py"

jobs:
  tests:
    name: "Python ${{ matrix.python-version }} ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [windows-latest, ubuntu-latest, macos-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false --local
          poetry install -E cli
      - name: Static type and format checking
        run: |
          python script/check.py
      - name: Generate coverage report
        run: |
          pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true

  publish:
    needs: tests
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry

      - name: Build
        run: |
          poetry build

      - name: Publish
        run: |
          poetry publish --username AberSheeran --password ${{ secrets.PYPIPASS }}
