{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65 web \u6846\u67b6\uff0c\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cIndex.py \u4e0d\u5185\u7f6e\u6570\u636e\u5e93\u3001\u7f13\u5b58\u7b49\u5176\u4ed6\u529f\u80fd\u3002\u9009\u62e9\u56f0\u96be\u8005\u8bf7\u76f4\u63a5\u4f7f\u7528 Django \u3002 \u5982\u679c\u4f60\u53d1\u73b0\u4e86\u4efb\u4f55\u7684 BUG\uff0c\u6b22\u8fce\u8bbf\u95ee Github Issues \u53cd\u9988\uff1b\u5982\u679c\u4f60\u6709\u9700\u8981\u4e0e\u5176\u4ed6\u4eba\u5171\u540c\u5206\u4eab\u3001\u8ba8\u8bba\u7684\u4e8b\u60c5\u6216\u5e0c\u671b\u589e\u52a0\u7684\u7279\u6027\uff0c\u6b22\u8fce\u8bbf\u95ee Github Discussions \u53d1\u8d77\u8ba8\u8bba\u3002 \u8bbe\u8ba1\u7075\u611f \u540d\u79f0\u6765\u6e90\u4e8e kennethreitz \u7684 \u540c\u540d\u9879\u76ee \uff0c\u4f46\u968f\u7740\u5404\u79cd\u60f3\u6cd5\u7684\u53d1\u5c55\u2026\u2026\u9010\u6e10\u504f\u79bb\u539f\u672c\u7684\u8bbe\u8ba1\u3002 \u5b89\u88c5\u65b9\u6cd5 Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.7\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 1 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c 1 pip install -U git+https://github.com/abersheeran/index.py@setup.py \u4e2d\u56fd\u5927\u9646\u5185\u7684\u7528\u6237\u53ef\u4ece Gitee \u4e0a\u7684\u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 1 pip install -U git+https://gitee.com/abersheeran/index.py.git@setup.py","title":"\u6982\u89c8"},{"location":"index.html#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65 web \u6846\u67b6\uff0c\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cIndex.py \u4e0d\u5185\u7f6e\u6570\u636e\u5e93\u3001\u7f13\u5b58\u7b49\u5176\u4ed6\u529f\u80fd\u3002\u9009\u62e9\u56f0\u96be\u8005\u8bf7\u76f4\u63a5\u4f7f\u7528 Django \u3002 \u5982\u679c\u4f60\u53d1\u73b0\u4e86\u4efb\u4f55\u7684 BUG\uff0c\u6b22\u8fce\u8bbf\u95ee Github Issues \u53cd\u9988\uff1b\u5982\u679c\u4f60\u6709\u9700\u8981\u4e0e\u5176\u4ed6\u4eba\u5171\u540c\u5206\u4eab\u3001\u8ba8\u8bba\u7684\u4e8b\u60c5\u6216\u5e0c\u671b\u589e\u52a0\u7684\u7279\u6027\uff0c\u6b22\u8fce\u8bbf\u95ee Github Discussions \u53d1\u8d77\u8ba8\u8bba\u3002","title":""},{"location":"index.html#_2","text":"\u540d\u79f0\u6765\u6e90\u4e8e kennethreitz \u7684 \u540c\u540d\u9879\u76ee \uff0c\u4f46\u968f\u7740\u5404\u79cd\u60f3\u6cd5\u7684\u53d1\u5c55\u2026\u2026\u9010\u6e10\u504f\u79bb\u539f\u672c\u7684\u8bbe\u8ba1\u3002","title":"\u8bbe\u8ba1\u7075\u611f"},{"location":"index.html#_3","text":"Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.7\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 1 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c 1 pip install -U git+https://github.com/abersheeran/index.py@setup.py \u4e2d\u56fd\u5927\u9646\u5185\u7684\u7528\u6237\u53ef\u4ece Gitee \u4e0a\u7684\u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 1 pip install -U git+https://gitee.com/abersheeran/index.py.git@setup.py","title":"\u5b89\u88c5\u65b9\u6cd5"},{"location":"command.html","text":"\u5185\u7f6e\u547d\u4ee4 Index-py \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002 index-cli index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002 index-cli uvicorn Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 uvicorn \u3002 1 2 3 4 5 6 7 8 9 10 11 \u276f index-cli uvicorn --help Usage: index-cli uvicorn [ OPTIONS ] APPLICATION use uvicorn to run Index.py application Options: --bind TEXT [ default: 127 .0.0.1:4190 ] --autoreload / --no-autoreload [ default: True ] --log-level [ critical | error | warning | info | debug ] [ default: info ] --help Show this message and exit. \u6b64\u547d\u4ee4\u53ef\u4ee5\u4fbf\u6377\u7684\u4f7f\u7528 Uvicorn \u542f\u52a8 Index-py \u9879\u76ee\u3002\u4f8b\u5982\uff1a index-cli uvicorn main:app \u3002 \u6709\u4e09\u4e2a\u9009\u9879\u53ef\u4ee5\u4f7f\u7528\uff1a --bind \uff1a\u6307\u5b9a\u7ed1\u5b9a\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a\"0.0.0.0:80\"\u3001\"unix:./uvicorn.sock\" --autoreload / --no-autoreload \uff1a\u6307\u5b9a Python \u6587\u4ef6\u53d8\u66f4\u65f6\uff0c\u662f\u5426\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 --log-level \uff1a\u6307\u5b9a\u8f93\u51fa\u65e5\u5fd7\u7684\u6700\u4f4e\u7b49\u7ea7\u3002 index-cli gunicorn index-cli gunicorn start Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 gunicorn \u3002 \u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 uvicorn \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u4f8b\u5982 index-cli gunicorn start main:app \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u276f index-cli gunicorn start --help Usage: index-cli gunicorn start [OPTIONS] APPLICATION Run gunicorn Options: --bind TEXT [default: 127.0.0.1:4190] --autoreload / --no-autoreload [default: False] --log-level [critical|error|warning|info|debug] [default: info] -w, --workers INTEGER -d, --daemon [default: False] -c, --configuration FILE --help Show this message and exit. --bind \uff1a\u6307\u5b9a\u7ed1\u5b9a\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a\"0.0.0.0:80\"\u3001\"unix:./uvicorn.sock\" --autoreload / --no-autoreload \uff1a\u6307\u5b9a Python \u6587\u4ef6\u53d8\u66f4\u65f6\uff0c\u662f\u5426\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 --log-level \uff1a\u6307\u5b9a\u8f93\u51fa\u65e5\u5fd7\u7684\u6700\u4f4e\u7b49\u7ea7\u3002 --workers \uff1a\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u4f7f\u7528\u4e86 --daemon \u9009\u9879\uff0cIndex-py \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u8fd0\u884c\u65e5\u5fd7\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 run.log \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u5177\u4f53\u914d\u7f6e\u8be6\u89c1 gunicorn \u6587\u6863 \u3002 index-cli gunicorn stop \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start \u5728\u542f\u52a8\u4e86 Index-py \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002 \u4f60\u60f3\u5f3a\u884c\u505c\u6b62\uff0c\u800c\u4e0d\u7b49\u5f85\u73b0\u5b58\u7684\u6240\u6709\u8bf7\u6c42\u7ed3\u675f\u4e4b\u540e\u518d\u505c\u6b62\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 --force-stop \u9009\u9879\u3002 index-cli gunicorn restart \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start \u5728\u542f\u52a8\u4e86 Index-py \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002 index-cli gunicorn reload \u6b64\u547d\u4ee4\u53ef\u4ee4 gunicorn \u8bfb\u53d6\u65b0\u7684\u914d\u7f6e\u5e76\u91cd\u65b0\u521b\u5efa worker \u8fdb\u7a0b\u3002 \u5728\u6ca1\u6709\u914d\u7f6e gunicorn \u4f7f\u7528 prefork \u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u6b64\u547d\u4ee4\u6548\u679c\u4e0e restart \u76f8\u540c\u3002 index-cli gunicorn incr \u589e\u52a0\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u3002 index-cli gunicorn decr \u51cf\u5c11\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u81ea\u5b9a\u4e49\u547d\u4ee4 Index-py \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002 \u6837\u4f8b \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 1 2 3 4 5 6 from indexpy.cli import index_cli @index_cli . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 1 2 3 4 5 6 7 8 \u276f index-cli --help Usage: index-cli [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: only-print Custom command \u5f15\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\u547d\u4ee4 \u5728\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u4eba\u5c01\u88c5\u597d\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\u547d\u4ee4\u65f6\uff0c\u53ea\u9700\u8981\u5728\u4e0a\u8ff0\u7684 commands.py \u6587\u4ef6\u4e2d\u7f16\u5199 import \u8bed\u53e5\u5bfc\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\u4e2d\u7f16\u5199\u7684\u547d\u4ee4\u6a21\u5757\u5373\u53ef\u3002 \u8fd9\u4e00\u8bbe\u8ba1\u662f\u4e3a\u4e86\u8ba9\u7528\u6237\u663e\u5f0f\u5730\u77e5\u6089\u81ea\u5df1\u4ece\u54ea\u4e9b\u7b2c\u4e09\u65b9\u6a21\u5757\u91cc\u5bfc\u5165\u4e86\u547d\u4ee4\u3002","title":"Command"},{"location":"command.html#_1","text":"Index-py \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002","title":"\u5185\u7f6e\u547d\u4ee4"},{"location":"command.html#index-cli","text":"index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002","title":"index-cli"},{"location":"command.html#index-cli-uvicorn","text":"Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 uvicorn \u3002 1 2 3 4 5 6 7 8 9 10 11 \u276f index-cli uvicorn --help Usage: index-cli uvicorn [ OPTIONS ] APPLICATION use uvicorn to run Index.py application Options: --bind TEXT [ default: 127 .0.0.1:4190 ] --autoreload / --no-autoreload [ default: True ] --log-level [ critical | error | warning | info | debug ] [ default: info ] --help Show this message and exit. \u6b64\u547d\u4ee4\u53ef\u4ee5\u4fbf\u6377\u7684\u4f7f\u7528 Uvicorn \u542f\u52a8 Index-py \u9879\u76ee\u3002\u4f8b\u5982\uff1a index-cli uvicorn main:app \u3002 \u6709\u4e09\u4e2a\u9009\u9879\u53ef\u4ee5\u4f7f\u7528\uff1a --bind \uff1a\u6307\u5b9a\u7ed1\u5b9a\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a\"0.0.0.0:80\"\u3001\"unix:./uvicorn.sock\" --autoreload / --no-autoreload \uff1a\u6307\u5b9a Python \u6587\u4ef6\u53d8\u66f4\u65f6\uff0c\u662f\u5426\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 --log-level \uff1a\u6307\u5b9a\u8f93\u51fa\u65e5\u5fd7\u7684\u6700\u4f4e\u7b49\u7ea7\u3002","title":"index-cli uvicorn"},{"location":"command.html#index-cli-gunicorn","text":"","title":"index-cli gunicorn"},{"location":"command.html#index-cli-gunicorn-start","text":"Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 gunicorn \u3002 \u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 uvicorn \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u4f8b\u5982 index-cli gunicorn start main:app \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u276f index-cli gunicorn start --help Usage: index-cli gunicorn start [OPTIONS] APPLICATION Run gunicorn Options: --bind TEXT [default: 127.0.0.1:4190] --autoreload / --no-autoreload [default: False] --log-level [critical|error|warning|info|debug] [default: info] -w, --workers INTEGER -d, --daemon [default: False] -c, --configuration FILE --help Show this message and exit. --bind \uff1a\u6307\u5b9a\u7ed1\u5b9a\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a\"0.0.0.0:80\"\u3001\"unix:./uvicorn.sock\" --autoreload / --no-autoreload \uff1a\u6307\u5b9a Python \u6587\u4ef6\u53d8\u66f4\u65f6\uff0c\u662f\u5426\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 --log-level \uff1a\u6307\u5b9a\u8f93\u51fa\u65e5\u5fd7\u7684\u6700\u4f4e\u7b49\u7ea7\u3002 --workers \uff1a\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u4f7f\u7528\u4e86 --daemon \u9009\u9879\uff0cIndex-py \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u8fd0\u884c\u65e5\u5fd7\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 run.log \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u5177\u4f53\u914d\u7f6e\u8be6\u89c1 gunicorn \u6587\u6863 \u3002","title":"index-cli gunicorn start"},{"location":"command.html#index-cli-gunicorn-stop","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start \u5728\u542f\u52a8\u4e86 Index-py \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002 \u4f60\u60f3\u5f3a\u884c\u505c\u6b62\uff0c\u800c\u4e0d\u7b49\u5f85\u73b0\u5b58\u7684\u6240\u6709\u8bf7\u6c42\u7ed3\u675f\u4e4b\u540e\u518d\u505c\u6b62\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 --force-stop \u9009\u9879\u3002","title":"index-cli gunicorn stop"},{"location":"command.html#index-cli-gunicorn-restart","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start \u5728\u542f\u52a8\u4e86 Index-py \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002","title":"index-cli gunicorn restart"},{"location":"command.html#index-cli-gunicorn-reload","text":"\u6b64\u547d\u4ee4\u53ef\u4ee4 gunicorn \u8bfb\u53d6\u65b0\u7684\u914d\u7f6e\u5e76\u91cd\u65b0\u521b\u5efa worker \u8fdb\u7a0b\u3002 \u5728\u6ca1\u6709\u914d\u7f6e gunicorn \u4f7f\u7528 prefork \u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u6b64\u547d\u4ee4\u6548\u679c\u4e0e restart \u76f8\u540c\u3002","title":"index-cli gunicorn reload"},{"location":"command.html#index-cli-gunicorn-incr","text":"\u589e\u52a0\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u3002","title":"index-cli gunicorn incr"},{"location":"command.html#index-cli-gunicorn-decr","text":"\u51cf\u5c11\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u3002","title":"index-cli gunicorn decr"},{"location":"command.html#_2","text":"Index-py \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002","title":"\u81ea\u5b9a\u4e49\u547d\u4ee4"},{"location":"command.html#_3","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 1 2 3 4 5 6 from indexpy.cli import index_cli @index_cli . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 1 2 3 4 5 6 7 8 \u276f index-cli --help Usage: index-cli [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: only-print Custom command","title":"\u6837\u4f8b"},{"location":"command.html#_4","text":"\u5728\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u4eba\u5c01\u88c5\u597d\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\u547d\u4ee4\u65f6\uff0c\u53ea\u9700\u8981\u5728\u4e0a\u8ff0\u7684 commands.py \u6587\u4ef6\u4e2d\u7f16\u5199 import \u8bed\u53e5\u5bfc\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\u4e2d\u7f16\u5199\u7684\u547d\u4ee4\u6a21\u5757\u5373\u53ef\u3002 \u8fd9\u4e00\u8bbe\u8ba1\u662f\u4e3a\u4e86\u8ba9\u7528\u6237\u663e\u5f0f\u5730\u77e5\u6089\u81ea\u5df1\u4ece\u54ea\u4e9b\u7b2c\u4e09\u65b9\u6a21\u5757\u91cc\u5bfc\u5165\u4e86\u547d\u4ee4\u3002","title":"\u5f15\u5165\u7b2c\u4e09\u65b9\u6a21\u5757\u547d\u4ee4"},{"location":"event.html","text":"Index-py \u5141\u8bb8\u6ce8\u518c\u82e5\u5e72\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u4ee5\u5904\u7406\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5173\u95ed\u65f6\u9700\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u3002 on_startup : Index-py \u542f\u52a8\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 on_shutdown : Index-py \u5173\u95ed\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 \u6ce8\u518c\u4e8b\u4ef6 \u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6ce8\u518c\u666e\u901a\u51fd\u6570\u6216\u7531 async def \u5b9a\u4e49\u7684\u5f02\u6b65\u51fd\u6570\u5747\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" ) \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa Index \u5bf9\u8c61\u65f6\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4ee5\u4e0b\u7a0b\u5e8f\u4e0e\u4e0a\u7b49\u4ef7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import logging from indexpy import Index logger = logging . getLogger ( \"example\" ) def logger_on_startup (): logger . info ( \"Called on startup\" ) def logger_on_shutdown (): logger . info ( \"Called on shutdown\" ) app = Index ( on_startup = [ logger_on_startup ], on_shutdown = [ logger_on_shutdown ], )","title":"Lifespan"},{"location":"event.html#_1","text":"\u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6ce8\u518c\u666e\u901a\u51fd\u6570\u6216\u7531 async def \u5b9a\u4e49\u7684\u5f02\u6b65\u51fd\u6570\u5747\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" ) \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa Index \u5bf9\u8c61\u65f6\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4ee5\u4e0b\u7a0b\u5e8f\u4e0e\u4e0a\u7b49\u4ef7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import logging from indexpy import Index logger = logging . getLogger ( \"example\" ) def logger_on_startup (): logger . info ( \"Called on startup\" ) def logger_on_shutdown (): logger . info ( \"Called on shutdown\" ) app = Index ( on_startup = [ logger_on_startup ], on_shutdown = [ logger_on_shutdown ], )","title":"\u6ce8\u518c\u4e8b\u4ef6"},{"location":"http.html","text":"HTTP \u5904\u7406\u5668 \u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u3002 \u51fd\u6570\u5904\u7406\u5668 \u4f7f\u7528\u51fd\u6570\u5904\u7406\u8bf7\u6c42\u662f\u5f88\u7b80\u5355\u7684\u3002 1 2 3 4 5 6 7 8 from indexpy import Index app = Index () @app . router . http ( \"/hello\" ) async def hello (): return \"hello\" @app.router.http \u88c5\u9970\u5668\u5c06\u8fd4\u56de\u539f\u59cb\u7684\u51fd\u6570\uff0c\u6545\u800c\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u51fd\u6570\u6ce8\u518c\u5230\u591a\u4e2a\u8def\u7531\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import Index , request app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-with-name\" ) async def hello (): if request . path_params : return f \"hello { request . path_params [ 'name' ] } \" return \"hello\" \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 required_method \u6765\u7ea6\u675f\u51fd\u6570\u5904\u7406\u5668\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 from indexpy import Index , request , required_method app = Index () @app . router . http ( \"/hello\" ) @required_method ( \"POST\" ) async def need_post (): return request . method \u5f53\u4f60\u4f7f\u7528 required_method \u5bf9\u8bf7\u6c42\u65b9\u6cd5\u8fdb\u884c\u7ea6\u675f\u65f6\uff0c OPTIONS \u65b9\u6cd5\u5c06\u4f1a\u88ab\u81ea\u52a8\u5904\u7406\u3002 \u5f53\u4f60\u4f7f\u7528 required_method \u5141\u8bb8 GET \u65b9\u6cd5\u65f6\uff0c HEAD \u65b9\u6cd5\u4e5f\u4f1a\u540c\u65f6\u88ab\u5141\u8bb8\u3002 \u7c7b\u5904\u7406\u5668 \u4f7f\u7528\u7c7b\u5904\u7406\u591a\u79cd\u8bf7\u6c42\u5341\u5206\u7b80\u5355\u3002\u53ea\u9700\u8981\u7ee7\u627f HttpView \u5e76\u7f16\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u652f\u6301\u7684\u65b9\u6cd5\u6709 \"get\" \uff0c \"post\" \uff0c \"put\" \uff0c \"patch\" \uff0c \"delete\" \uff0c \"head\" \uff0c \"options\" \uff0c \"trace\" \u3002 \u5141\u8bb8\u66f4\u591a\u8bf7\u6c42\u65b9\u6cd5 \u5728\u7ee7\u627f\u7c7b\u65f6\u8986\u76d6\u7c7b\u5c5e\u6027 HTTP_METHOD_NAMES \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from indexpy import Index , request , HttpView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HttpView ): async def get ( self ): return request . method async def post ( self ): return request . method async def put ( self ): return request . method async def patch ( self ): return request . method async def delete ( self ): return request . method \u83b7\u53d6\u8bf7\u6c42\u503c \u4f7f\u7528 from indexpy import request \u8bed\u53e5\u83b7\u53d6\u5168\u5c40\u53d8\u91cf request \uff0c\u5b83\u662f\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bfb\u5199\u5220\u5f53\u524d\u8bf7\u6c42\u5bf9\u5e94\u7684 Request \u5bf9\u8c61\u7684\u5404\u4e2a\u5c5e\u6027\u3002\u4e00\u822c\u6765\u8bf4\u8fd9\u8db3\u4ee5\u5e94\u4ed8\u5927\u90e8\u5206\u9700\u6c42\uff0c\u4f46\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u8bbf\u95ee\u539f\u59cb Request \u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 indexpy.requests.request_var.get() \u3002 \u4ee5\u4e0b\u662f indexpy.requests.Request \u5bf9\u8c61\u7684\u5e38\u7528\u5c5e\u6027\u4e0e\u65b9\u6cd5\u3002 Method \u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002 URL \u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme Path Parameters request.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002 Headers request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002 Accept \u901a\u8fc7\u8bfb\u53d6 request.accepted_types \u5c5e\u6027\u4f60\u53ef\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u5168\u90e8\u54cd\u5e94\u7c7b\u578b\u3002 \u901a\u8fc7\u8c03\u7528 request.accepts \u51fd\u6570\u4f60\u53ef\u4ee5\u5224\u65ad\u5ba2\u6237\u7aef\u63a5\u53d7\u4ec0\u4e48\u6837\u7684\u54cd\u5e94\u7c7b\u578b\u3002\u4f8b\u5982\uff1a request.accepts(\"text/html\") \u3002 Content Type \u4f60\u53ef\u4ee5\u4f7f\u7528 request.content_type == \"application/json\" \u4e4b\u7c7b\u7684\u8bed\u53e5\u6765\u5224\u65ad\u8bf7\u6c42\u7c7b\u578b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\u4e0d\u5fc5\u8003\u8651\u73b0\u5b9e\u4e2d\u7684 HTTP \u8bf7\u6c42\u5934 Content-Type: application/json; charset=utf-8 \u5c3e\u90e8\u7684 ; charset=utf-8 \u4f1a\u5f71\u54cd\u5224\u65ad\u7684\u51c6\u786e\u6027\uff0c\u8fd9\u7c7b\u9009\u9879\u4f1a\u88ab\u4ee5\u5b57\u5178\u5f62\u5f0f\u89e3\u6790\u5230 request.content_type.options \u3002 Query Parameters request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search'] Client Address request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002 Cookies request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie') Body \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 await request.data() \uff1a\u5c06 body \u6839\u636e content_type \u63d0\u4f9b\u7684\u4fe1\u606f\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a 1 2 3 4 5 6 async def post (): ... body = b '' async for chunk in request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body / .form / .json \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002 Request Files \u901a\u8fc7 await request.form \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff1a async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a 1 2 3 form = await request . form filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read () State \u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 1 2 3 4 5 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220 \u8fd4\u56de\u54cd\u5e94\u503c \u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a HttpResponse \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002 HttpResponse \u7b7e\u540d\uff1a HttpResponse(status_code: int = 200, headers: Mapping[str, str] = None) status_code - HTTP \u72b6\u6001\u7801\u3002 headers - \u5b57\u7b26\u4e32\u5b57\u5178\u3002 Set Cookie HttpResponse \u63d0\u4f9b set_cookie \u65b9\u6cd5\u4ee5\u5141\u8bb8\u4f60\u8bbe\u7f6e cookies\u3002 \u7b7e\u540d\uff1a HttpResponse.set_cookie(key, value=\"\", max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\") key: str \uff0c\u5c06\u6210\u4e3a Cookie \u7684\u952e\u3002 value: str = \"\" \uff0c\u5c06\u662f Cookie \u7684\u503c\u3002 max_age: Optional[int] \uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d\u5b9a\u4e49 Cookie \u7684\u751f\u5b58\u671f\u3002\u975e\u6b63\u6574\u6570\u4f1a\u7acb\u5373\u4e22\u5f03 Cookie\u3002 expires: Optional[int] \uff0c\u5b83\u5b9a\u4e49 Cookie \u8fc7\u671f\u4e4b\u524d\u7684\u79d2\u6570\u3002 path: str = \"/\" \uff0c\u5b83\u6307\u5b9a Cookie \u5c06\u5e94\u7528\u5230\u7684\u8def\u7531\u7684\u5b50\u96c6\u3002 domain: Optional[str] \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u5bf9\u5176\u6709\u6548\u7684\u57df\u3002 secure: bool = False \uff0c\u6307\u793a\u4ec5\u5f53\u4f7f\u7528 HTTPS \u534f\u8bae\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u624d\u4f1a\u5c06 Cookie \u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 httponly: bool = False \uff0c\u6307\u793a\u65e0\u6cd5\u901a\u8fc7 Javascript \u901a\u8fc7 Document.cookie \u5c5e\u6027\u3001 XMLHttpRequest \u6216 Request \u7b49 API \u6765\u8bbf\u95ee Cookie\u3002 samesite: str = \"lax\" \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u7684\u76f8\u540c\u7f51\u7ad9\u7b56\u7565\u3002\u6709\u6548\u503c\u4e3a \"lax\" \uff0c \"strict\" \u548c \"none\" \u3002 Delete Cookie HttpResponse \u4e5f\u63d0\u4f9b\u4e86 delete_cookie \u65b9\u6cd5\u6307\u5b9a\u5df2\u8bbe\u7f6e\u7684 Cookie \u8fc7\u671f\u3002 \u7b7e\u540d: HttpResponse.delete_cookie(key, path='/', domain=None) PlainTextResponse \u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import PlainTextResponse async def return_plaintext (): return PlainTextResponse ( 'Hello, world!' ) HTMLResponse \u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import HTMLResponse async def return_html (): return HTMLResponse ( '<html><body><h1>Hello, world!</h1></body></html>' ) JSONResponse \u63a5\u53d7\u4e00\u4e9b Python \u5bf9\u8c61\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import JSONResponse async def return_json (): return JSONResponse ({ 'hello' : 'world' }) JSONResponse \u4ee5\u5173\u952e\u8bcd\u53c2\u6570\u7684\u5f62\u5f0f\u66b4\u9732\u51fa\u5168\u90e8 json.dumps \u7684\u9009\u9879\u4ee5\u4f9b\u81ea\u5b9a\u4e49\u3002\u4f8b\u5982\u5728\u5f88\u591a\u65f6\u5019\uff0cPython \u5185\u7f6e\u7684 json \u8f6c\u6362\u5668\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u9645\u9879\u76ee\u7684\u5e8f\u5217\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6 default \u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u65e0\u6cd5\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8be5\u5982\u4f55\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import json import decimal import datetime from indexpy import JSONResponse def custom_convert ( obj ): if isinstance ( obj , datetime . datetime ): return obj . strftime ( \"%Y-%m- %d %H:%M:%S\" ) if isinstance ( obj , datetime . date ): return obj . strftime ( \"%Y-%m- %d \" ) if isinstance ( obj , decimal . Decimal ): return str ( obj ) raise TypeError ( f 'Object of type { obj . __class__ . __name__ } is not JSON serializable' ) async def return_json (): return JSONResponse ({ 'hello' : 'world' }, default = custom_convert ) RedirectResponse \u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\u3002 1 2 3 4 5 from indexpy import RedirectResponse async def return_redirect (): return RedirectResponse ( '/' ) StreamResponse \u63a5\u53d7\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from indexpy import StreamingResponse async def slow_numbers ( minimum , maximum ): yield ( '<html><body><ul>' ) for number in range ( minimum , maximum + 1 ): yield '<li> %d </li>' % number await asyncio . sleep ( 0.5 ) yield ( '</ul></body></html>' ) async def return_stream ( scope , receive , send ): generator = slow_numbers ( 1 , 10 ) return StreamingResponse ( generator , content_type = 'text/html' ) FileResponse \u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u5b83\u91c7\u7528\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a filepath - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4e0e Response \u4e2d\u7684 headers \u53c2\u6570\u7684\u4f5c\u7528\u76f8\u540c\u3002 content_type - \u6587\u4ef6\u7684 MIME \u5a92\u4f53\u7c7b\u578b\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 download_name - \u5982\u679c\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 stat_result - \u63a5\u53d7\u4e00\u4e2a os.stat_result \u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u5219\u4f1a\u81ea\u52a8\u4f7f\u7528 os.stat(filepath) \u7684\u7ed3\u679c\u3002 FileResponse \u5c06\u81ea\u52a8\u8bbe\u7f6e\u9002\u5f53\u7684 Content-Length \u3001 Last-Modified \u548c ETag \u6807\u5934\u3002\u5e76\u4e14\u65e0\u9700\u4efb\u4f55\u989d\u5916\u7684\u5904\u7406\u5373\u53ef\u652f\u6301 \u6587\u4ef6\u8303\u56f4\u8bf7\u6c42 \u3002 TemplateResponse TemplateResponse \u662f app.templates.TemplateResponse \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\u3002 Jinja2 \u6a21\u677f\u5f15\u64ce Index-py \u5185\u7f6e\u4e86\u5bf9 Jinja2 \u6a21\u677f\u7684\u652f\u6301\uff0c\u53ea\u8981\u4f60\u5b89\u88c5\u4e86 jinja2 \u6a21\u5757\uff0c\u5c31\u80fd\u4ece indexpy.templates \u4e2d\u5bfc\u51fa Jinja2Templates \u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u6837\u4f8b\uff0c\u8bbf\u95ee \"/\" \u5b83\u5c06\u4ece\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 templates \u76ee\u5f55\u5bfb\u627e homepage.html \u6587\u4ef6\u8fdb\u884c\u6e32\u67d3\u3002 1 2 3 4 5 6 7 8 9 from indexpy import Index , TemplateResponse from indexpy.http.templates import Jinja2Templates app = Index ( templates = Jinja2Templates ( \"templates\" )) @app . router . http ( \"/\" ) async def homepage (): return TemplateResponse ( \"homepage.html\" ) \u5982\u679c\u4f60\u8981\u4f7f\u7528\u67d0\u4e2a\u6a21\u5757\u4e0b\u7684\u6307\u5b9a\u6587\u4ef6\u5939\u4e2d\u7684\u6a21\u677f\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 Jinja2Templates(\"module_name:dirname\") \u3002\u4f60\u8fd8\u53ef\u4ee5\u4f20\u9012\u591a\u4e2a\u76ee\u5f55\u8ba9 Jinja2 \u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u6a21\u677f\uff0c\u4f8b\u5982\uff1a Jinja2Templates(\"templates\", \"module_name:dirname\") \u3002 \u5176\u4ed6\u6a21\u677f\u5f15\u64ce \u901a\u8fc7\u7ee7\u627f indexpy.templates.BaseTemplates \u5e76\u5b9e\u73b0 TemplateResponse \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u6a21\u677f\u5f15\u64ce\u7c7b\u3002 SendEventResponse \u901a\u8fc7 SendEventResponse \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Server-sent Events \u54cd\u5e94\uff0c\u8fd9\u662f\u4e00\u79cd HTTP \u957f\u8fde\u63a5\u54cd\u5e94\uff0c\u53ef\u5e94\u7528\u4e8e\u670d\u52a1\u5668\u5b9e\u65f6\u63a8\u9001\u6570\u636e\u5230\u5ba2\u6237\u7aef\u7b49\u573a\u666f\u3002 SendEventResponse \u9664\u4e86\u53ef\u4ee5\u63a5\u53d7\u8bf8\u5982 status_code \u3001 headers \u7b49\u5e38\u89c4\u53c2\u6570\u5916\uff0c\u8fd8\u9700\u8981\u81ea\u884c\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u6d88\u606f\u7684\u5f02\u6b65\u751f\u6210\u5668\u3002\u4f20\u5165\u7684\u5f02\u6b65\u751f\u6210\u5668 yield \u7684\u6bcf\u4e00\u6761\u6d88\u606f\u90fd\u9700\u8981\u4e3a\u5408\u89c4\u7684 Server-Sent Event \u6d88\u606f\uff08 indexpy.ServerSentEvent \u7c7b\u578b\uff09\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6bcf\u9694\u4e00\u79d2\u53d1\u9001\u4e00\u6761 hello \u6d88\u606f\u3001\u4e00\u5171\u53d1\u9001\u4e00\u767e\u96f6\u4e00\u6761\u6d88\u606f\u7684\u6837\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from indexpy import Index , SendEventResponse app = Index () @app . router . http ( \"/message\" ) async def message (): async def message_gen (): for i in range ( 101 ): await asyncio . sleep ( 1 ) yield { \"id\" : i , \"data\" : \"hello\" } return SendEventResponse ( message_gen ()) \u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5 \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex-py \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5904\u7406\u5668\u8fd4\u56de\u7684\u975e HttpResponse \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e HttpResponse \u5bf9\u8c61\u8f6c\u6362\u4e3a HttpResponse \u5bf9\u8c61\u3002 \u5982\u679c\u9700\u8981\u624b\u52a8\u628a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a HttpResponse \u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 indexpy.responses.convert_response \u3002 \u5728\u4e0b\u4f8b\u4e2d\uff0c\u89c6\u56fe\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a dict \u5bf9\u8c61\uff0c\u4f46\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u5374\u662f\u4e00\u4e2a JSON\u3002\u8fd9\u662f\u56e0\u4e3a Index-py \u5185\u7f6e\u4e86\u4e00\u4e9b\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u5e38\u89c1\u7684\u7c7b\u578b\uff1a dict | tuple | list \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a JSONResponse str | bytes \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a PlainTextResponse typing.AsyncGeneratorType \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a SendEventResponse pathlib.PurePath \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a FileResponse 1 2 async def get_detail (): return { \"key\" : \"value\" } \u4f60\u8fd8\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u6765\u81ea\u5b9a\u4e49 HTTP Status \u548c HTTP Headers\uff1a 1 2 3 4 5 6 async def not_found (): return { \"message\" : \"Not found\" }, 404 async def no_content (): return \"\" , 301 , { \"location\" : \"https://index-py.aber.sh\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5f53\u4f60\u5728\u89c6\u56fe\u51fd\u6570\u91cc\u8fd4\u56de Error \u5bf9\u8c61\u65f6\uff0c\u5b83\u90fd\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\u4e3a JSONResponse \uff0c\u5e76\u4e14\u72b6\u6001\u7801\u9ed8\u8ba4\u4e3a 400 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from dataclasses import dataclass , asdict from typing import Mapping from indexpy.http.responses import automatic , HttpResponse , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 , headers : Mapping [ str , str ] = None ) -> HttpResponse : return JSONResponse ( asdict ( error ), status , headers ) \u6216\u8005\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684 tuple / list / dict \u6240\u5bf9\u5e94\u7684 JSONResponse \uff1a 1 2 3 4 5 6 7 8 9 10 from indexpy.responses import automatic , HttpResponse ... @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _more_json ( body : dict , status : int = 200 , headers : dict = None ) -> HttpResponse : return CustomizeJSONResponse ( body , status , headers ) \u5f02\u5e38\u5904\u7406 HTTPException \u5176\u53c2\u6570\u7b7e\u540d\u662f\uff1a HTTPException(status_code: int, headers: dict = None, content: typing.Any = None) \u4f60\u53ef\u4ee5\u901a\u8fc7\u629b\u51fa HTTPException \u6765\u8fd4\u56de\u4e00\u4e2a HTTP \u54cd\u5e94\uff08\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u53d8\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5f02\u5e38\u629b\u51fa\uff0cIndex-py \u4f1a\u5c06\u5b83\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u54cd\u5e94\u5bf9\u8c61\uff09\u3002\u5982\u679c\u4f60\u6ca1\u6709\u7ed9\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3a bytes \u6216 str \u7684 content \u503c\uff0c\u90a3\u4e48\u5b83\u5c06\u4f7f\u7528 Python \u6807\u51c6\u5e93\u4e2d\u7684 http.HTTPStatus(status_code).description \u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 1 2 3 4 5 6 7 from indexpy.http import HTTPException async def endpoint (): ... raise HTTPException ( 400 ) ... \u6709\u65f6\u5019\u4e5f\u8bb8\u4f60\u60f3\u8fd4\u56de\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u50cf\u4f7f\u7528 HttpResponse \u4e00\u6837\u4e3a\u5b83\u4f20\u9012 content \u3001 headers \u53c2\u6570\u6765\u63a7\u5236\u6700\u7ec8\u5b9e\u9645\u7684\u54cd\u5e94\u5bf9\u8c61\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 from indexpy.http import HTTPException async def endpoint (): ... raise HTTPException ( 405 , headers = { \"Allow\" : \"HEAD, GET, POST\" }) ... \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex-py \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4f60\u53ef\u4ee5\u6355\u6349\u6307\u5b9a\u7684 HTTP \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u5728\u5e94\u5bf9\u5305\u542b\u5bf9\u5e94 HTTP \u72b6\u6001\u7801\u7684 HTTPException \u5f02\u5e38\u65f6\uff0cIndex-py \u4f1a\u4f7f\u7528\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u800c\u4e0d\u662f\u9ed8\u8ba4\u884c\u4e3a\u3002\u4f60\u4e5f\u53ef\u4ee5\u6355\u6349\u5176\u4ed6\u7ee7\u627f\u81ea Exception \u7684\u5f02\u5e38\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u8fd4\u56de\u6307\u5b9a\u7684\u5185\u5bb9\u7ed9\u5ba2\u6237\u7aef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index , HTTPException , HttpResponse , PlainTextResponse app = Index () @app . exception_handler ( 404 ) async def not_found ( exc : HTTPException ) -> HttpResponse : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) async def value_error ( exc : ValueError ) -> HttpResponse : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) \u9664\u4e86\u88c5\u9970\u5668\u6ce8\u518c\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u5f0f\u7684\u6ce8\u518c\u65b9\u5f0f\uff0c\u4e0b\u4f8b\u4e0e\u4e0a\u4f8b\u7b49\u4ef7\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy import Index , HTTPException , HttpResponse , PlainTextResponse async def not_found ( exc : HTTPException ) -> HttpResponse : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) async def value_error ( exc : ValueError ) -> HttpResponse : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) app = Index ( exception_handlers = { 404 : not_found , ValueError : value_error , }) \u5185\u7f6e\u4e2d\u95f4\u4ef6 CORS \u5728\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u89e3\u51b3\u8de8\u57df\u95ee\u9898\u4e00\u822c\u4f7f\u7528 Cross-Origin Resource Sharing \uff0c\u5728 Index-py \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u5feb\u901f\u914d\u7f6e API \u5141\u8bb8\u8de8\u57df\u3002 1 2 3 4 5 from indexpy import Routes from indexpy.middlewares import CORSMiddleware routes = Routes ( ... , http_middlewares = [ CORSMiddleware ()]) CORSMiddleware \u6709\u5982\u4e0b\u9009\u9879\uff1a allow_origins: Iterable[Pattern] \uff1a\u5141\u8bb8\u7684 Origin\uff0c\u9700\u8981 re.compile \u9884\u7f16\u8bd1\u540e\u7684 Pattern \u5bf9\u8c61\uff1b\u9ed8\u8ba4\u503c\u4e3a (re.compile(\".*\"), ) allow_methods: Iterable[str] \uff1a\u5141\u8bb8\u7684\u8bf7\u6c42\u65b9\u6cd5\uff1b\u9ed8\u8ba4\u503c\u4e3a (\"GET\"\uff0c\"POST\"\uff0c\"PUT\"\uff0c\"PATCH\"\uff0c\"DELETE\"\uff0c\"HEAD\"\uff0c\"OPTIONS\"\uff0c\"TRACE\") \u3002 allow_headers: Iterable[str] \uff1a\u5141\u8bb8\u7684\u8bf7\u6c42\u5934\uff0c\u5bf9\u5e94 Access-Control-Allow-Headers \u3002 expose_headers: Iterable[str] \uff1a\u80fd\u5728\u54cd\u5e94\u4e2d\u5217\u51fa\u7684\u8bf7\u6c42\u5934\uff0c\u5bf9\u5e94 Access-Control-Expose-Headers \u3002 allow_credentials: bool \uff1a\u4e3a\u771f\u65f6\u5219\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u643a\u5e26 Cookies\uff0c\u53cd\u4e4b\u4e0d\u5141\u8bb8\uff1b\u9ed8\u8ba4\u4e3a False \u3002 max_age: int \uff1a\u9884\u8bf7\u6c42\u7684\u7f13\u5b58\u65f6\u95f4\uff1b\u9ed8\u8ba4\u4e3a 600 \u79d2\u3002","title":"Http"},{"location":"http.html#http","text":"\u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u3002","title":"HTTP \u5904\u7406\u5668"},{"location":"http.html#_1","text":"\u4f7f\u7528\u51fd\u6570\u5904\u7406\u8bf7\u6c42\u662f\u5f88\u7b80\u5355\u7684\u3002 1 2 3 4 5 6 7 8 from indexpy import Index app = Index () @app . router . http ( \"/hello\" ) async def hello (): return \"hello\" @app.router.http \u88c5\u9970\u5668\u5c06\u8fd4\u56de\u539f\u59cb\u7684\u51fd\u6570\uff0c\u6545\u800c\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u51fd\u6570\u6ce8\u518c\u5230\u591a\u4e2a\u8def\u7531\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import Index , request app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-with-name\" ) async def hello (): if request . path_params : return f \"hello { request . path_params [ 'name' ] } \" return \"hello\" \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 required_method \u6765\u7ea6\u675f\u51fd\u6570\u5904\u7406\u5668\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 from indexpy import Index , request , required_method app = Index () @app . router . http ( \"/hello\" ) @required_method ( \"POST\" ) async def need_post (): return request . method \u5f53\u4f60\u4f7f\u7528 required_method \u5bf9\u8bf7\u6c42\u65b9\u6cd5\u8fdb\u884c\u7ea6\u675f\u65f6\uff0c OPTIONS \u65b9\u6cd5\u5c06\u4f1a\u88ab\u81ea\u52a8\u5904\u7406\u3002 \u5f53\u4f60\u4f7f\u7528 required_method \u5141\u8bb8 GET \u65b9\u6cd5\u65f6\uff0c HEAD \u65b9\u6cd5\u4e5f\u4f1a\u540c\u65f6\u88ab\u5141\u8bb8\u3002","title":"\u51fd\u6570\u5904\u7406\u5668"},{"location":"http.html#_2","text":"\u4f7f\u7528\u7c7b\u5904\u7406\u591a\u79cd\u8bf7\u6c42\u5341\u5206\u7b80\u5355\u3002\u53ea\u9700\u8981\u7ee7\u627f HttpView \u5e76\u7f16\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u652f\u6301\u7684\u65b9\u6cd5\u6709 \"get\" \uff0c \"post\" \uff0c \"put\" \uff0c \"patch\" \uff0c \"delete\" \uff0c \"head\" \uff0c \"options\" \uff0c \"trace\" \u3002 \u5141\u8bb8\u66f4\u591a\u8bf7\u6c42\u65b9\u6cd5 \u5728\u7ee7\u627f\u7c7b\u65f6\u8986\u76d6\u7c7b\u5c5e\u6027 HTTP_METHOD_NAMES \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from indexpy import Index , request , HttpView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HttpView ): async def get ( self ): return request . method async def post ( self ): return request . method async def put ( self ): return request . method async def patch ( self ): return request . method async def delete ( self ): return request . method","title":"\u7c7b\u5904\u7406\u5668"},{"location":"http.html#_3","text":"\u4f7f\u7528 from indexpy import request \u8bed\u53e5\u83b7\u53d6\u5168\u5c40\u53d8\u91cf request \uff0c\u5b83\u662f\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bfb\u5199\u5220\u5f53\u524d\u8bf7\u6c42\u5bf9\u5e94\u7684 Request \u5bf9\u8c61\u7684\u5404\u4e2a\u5c5e\u6027\u3002\u4e00\u822c\u6765\u8bf4\u8fd9\u8db3\u4ee5\u5e94\u4ed8\u5927\u90e8\u5206\u9700\u6c42\uff0c\u4f46\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u8bbf\u95ee\u539f\u59cb Request \u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 indexpy.requests.request_var.get() \u3002 \u4ee5\u4e0b\u662f indexpy.requests.Request \u5bf9\u8c61\u7684\u5e38\u7528\u5c5e\u6027\u4e0e\u65b9\u6cd5\u3002","title":"\u83b7\u53d6\u8bf7\u6c42\u503c"},{"location":"http.html#method","text":"\u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002","title":"Method"},{"location":"http.html#url","text":"\u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme","title":"URL"},{"location":"http.html#path-parameters","text":"request.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002","title":"Path Parameters"},{"location":"http.html#headers","text":"request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002","title":"Headers"},{"location":"http.html#accept","text":"\u901a\u8fc7\u8bfb\u53d6 request.accepted_types \u5c5e\u6027\u4f60\u53ef\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u5168\u90e8\u54cd\u5e94\u7c7b\u578b\u3002 \u901a\u8fc7\u8c03\u7528 request.accepts \u51fd\u6570\u4f60\u53ef\u4ee5\u5224\u65ad\u5ba2\u6237\u7aef\u63a5\u53d7\u4ec0\u4e48\u6837\u7684\u54cd\u5e94\u7c7b\u578b\u3002\u4f8b\u5982\uff1a request.accepts(\"text/html\") \u3002","title":"Accept"},{"location":"http.html#content-type","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 request.content_type == \"application/json\" \u4e4b\u7c7b\u7684\u8bed\u53e5\u6765\u5224\u65ad\u8bf7\u6c42\u7c7b\u578b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\u4e0d\u5fc5\u8003\u8651\u73b0\u5b9e\u4e2d\u7684 HTTP \u8bf7\u6c42\u5934 Content-Type: application/json; charset=utf-8 \u5c3e\u90e8\u7684 ; charset=utf-8 \u4f1a\u5f71\u54cd\u5224\u65ad\u7684\u51c6\u786e\u6027\uff0c\u8fd9\u7c7b\u9009\u9879\u4f1a\u88ab\u4ee5\u5b57\u5178\u5f62\u5f0f\u89e3\u6790\u5230 request.content_type.options \u3002","title":"Content Type"},{"location":"http.html#query-parameters","text":"request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search']","title":"Query Parameters"},{"location":"http.html#client-address","text":"request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002","title":"Client Address"},{"location":"http.html#cookies","text":"request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie')","title":"Cookies"},{"location":"http.html#body","text":"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 await request.data() \uff1a\u5c06 body \u6839\u636e content_type \u63d0\u4f9b\u7684\u4fe1\u606f\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a 1 2 3 4 5 6 async def post (): ... body = b '' async for chunk in request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body / .form / .json \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002","title":"Body"},{"location":"http.html#request-files","text":"\u901a\u8fc7 await request.form \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff1a async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a 1 2 3 form = await request . form filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read ()","title":"Request Files"},{"location":"http.html#state","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 1 2 3 4 5 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220","title":"State"},{"location":"http.html#_4","text":"\u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a HttpResponse \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002","title":"\u8fd4\u56de\u54cd\u5e94\u503c"},{"location":"http.html#httpresponse","text":"\u7b7e\u540d\uff1a HttpResponse(status_code: int = 200, headers: Mapping[str, str] = None) status_code - HTTP \u72b6\u6001\u7801\u3002 headers - \u5b57\u7b26\u4e32\u5b57\u5178\u3002","title":"HttpResponse"},{"location":"http.html#set-cookie","text":"HttpResponse \u63d0\u4f9b set_cookie \u65b9\u6cd5\u4ee5\u5141\u8bb8\u4f60\u8bbe\u7f6e cookies\u3002 \u7b7e\u540d\uff1a HttpResponse.set_cookie(key, value=\"\", max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\") key: str \uff0c\u5c06\u6210\u4e3a Cookie \u7684\u952e\u3002 value: str = \"\" \uff0c\u5c06\u662f Cookie \u7684\u503c\u3002 max_age: Optional[int] \uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d\u5b9a\u4e49 Cookie \u7684\u751f\u5b58\u671f\u3002\u975e\u6b63\u6574\u6570\u4f1a\u7acb\u5373\u4e22\u5f03 Cookie\u3002 expires: Optional[int] \uff0c\u5b83\u5b9a\u4e49 Cookie \u8fc7\u671f\u4e4b\u524d\u7684\u79d2\u6570\u3002 path: str = \"/\" \uff0c\u5b83\u6307\u5b9a Cookie \u5c06\u5e94\u7528\u5230\u7684\u8def\u7531\u7684\u5b50\u96c6\u3002 domain: Optional[str] \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u5bf9\u5176\u6709\u6548\u7684\u57df\u3002 secure: bool = False \uff0c\u6307\u793a\u4ec5\u5f53\u4f7f\u7528 HTTPS \u534f\u8bae\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u624d\u4f1a\u5c06 Cookie \u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 httponly: bool = False \uff0c\u6307\u793a\u65e0\u6cd5\u901a\u8fc7 Javascript \u901a\u8fc7 Document.cookie \u5c5e\u6027\u3001 XMLHttpRequest \u6216 Request \u7b49 API \u6765\u8bbf\u95ee Cookie\u3002 samesite: str = \"lax\" \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u7684\u76f8\u540c\u7f51\u7ad9\u7b56\u7565\u3002\u6709\u6548\u503c\u4e3a \"lax\" \uff0c \"strict\" \u548c \"none\" \u3002","title":"Set Cookie"},{"location":"http.html#delete-cookie","text":"HttpResponse \u4e5f\u63d0\u4f9b\u4e86 delete_cookie \u65b9\u6cd5\u6307\u5b9a\u5df2\u8bbe\u7f6e\u7684 Cookie \u8fc7\u671f\u3002 \u7b7e\u540d: HttpResponse.delete_cookie(key, path='/', domain=None)","title":"Delete Cookie"},{"location":"http.html#plaintextresponse","text":"\u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import PlainTextResponse async def return_plaintext (): return PlainTextResponse ( 'Hello, world!' )","title":"PlainTextResponse"},{"location":"http.html#htmlresponse","text":"\u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import HTMLResponse async def return_html (): return HTMLResponse ( '<html><body><h1>Hello, world!</h1></body></html>' )","title":"HTMLResponse"},{"location":"http.html#jsonresponse","text":"\u63a5\u53d7\u4e00\u4e9b Python \u5bf9\u8c61\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 1 2 3 4 5 from indexpy import JSONResponse async def return_json (): return JSONResponse ({ 'hello' : 'world' }) JSONResponse \u4ee5\u5173\u952e\u8bcd\u53c2\u6570\u7684\u5f62\u5f0f\u66b4\u9732\u51fa\u5168\u90e8 json.dumps \u7684\u9009\u9879\u4ee5\u4f9b\u81ea\u5b9a\u4e49\u3002\u4f8b\u5982\u5728\u5f88\u591a\u65f6\u5019\uff0cPython \u5185\u7f6e\u7684 json \u8f6c\u6362\u5668\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u9645\u9879\u76ee\u7684\u5e8f\u5217\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6 default \u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u65e0\u6cd5\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8be5\u5982\u4f55\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import json import decimal import datetime from indexpy import JSONResponse def custom_convert ( obj ): if isinstance ( obj , datetime . datetime ): return obj . strftime ( \"%Y-%m- %d %H:%M:%S\" ) if isinstance ( obj , datetime . date ): return obj . strftime ( \"%Y-%m- %d \" ) if isinstance ( obj , decimal . Decimal ): return str ( obj ) raise TypeError ( f 'Object of type { obj . __class__ . __name__ } is not JSON serializable' ) async def return_json (): return JSONResponse ({ 'hello' : 'world' }, default = custom_convert )","title":"JSONResponse"},{"location":"http.html#redirectresponse","text":"\u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\u3002 1 2 3 4 5 from indexpy import RedirectResponse async def return_redirect (): return RedirectResponse ( '/' )","title":"RedirectResponse"},{"location":"http.html#streamresponse","text":"\u63a5\u53d7\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from indexpy import StreamingResponse async def slow_numbers ( minimum , maximum ): yield ( '<html><body><ul>' ) for number in range ( minimum , maximum + 1 ): yield '<li> %d </li>' % number await asyncio . sleep ( 0.5 ) yield ( '</ul></body></html>' ) async def return_stream ( scope , receive , send ): generator = slow_numbers ( 1 , 10 ) return StreamingResponse ( generator , content_type = 'text/html' )","title":"StreamResponse"},{"location":"http.html#fileresponse","text":"\u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u5b83\u91c7\u7528\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a filepath - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4e0e Response \u4e2d\u7684 headers \u53c2\u6570\u7684\u4f5c\u7528\u76f8\u540c\u3002 content_type - \u6587\u4ef6\u7684 MIME \u5a92\u4f53\u7c7b\u578b\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 download_name - \u5982\u679c\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 stat_result - \u63a5\u53d7\u4e00\u4e2a os.stat_result \u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u4f20\u5165\u5219\u4f1a\u81ea\u52a8\u4f7f\u7528 os.stat(filepath) \u7684\u7ed3\u679c\u3002 FileResponse \u5c06\u81ea\u52a8\u8bbe\u7f6e\u9002\u5f53\u7684 Content-Length \u3001 Last-Modified \u548c ETag \u6807\u5934\u3002\u5e76\u4e14\u65e0\u9700\u4efb\u4f55\u989d\u5916\u7684\u5904\u7406\u5373\u53ef\u652f\u6301 \u6587\u4ef6\u8303\u56f4\u8bf7\u6c42 \u3002","title":"FileResponse"},{"location":"http.html#templateresponse","text":"TemplateResponse \u662f app.templates.TemplateResponse \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\u3002","title":"TemplateResponse"},{"location":"http.html#jinja2","text":"Index-py \u5185\u7f6e\u4e86\u5bf9 Jinja2 \u6a21\u677f\u7684\u652f\u6301\uff0c\u53ea\u8981\u4f60\u5b89\u88c5\u4e86 jinja2 \u6a21\u5757\uff0c\u5c31\u80fd\u4ece indexpy.templates \u4e2d\u5bfc\u51fa Jinja2Templates \u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u6837\u4f8b\uff0c\u8bbf\u95ee \"/\" \u5b83\u5c06\u4ece\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 templates \u76ee\u5f55\u5bfb\u627e homepage.html \u6587\u4ef6\u8fdb\u884c\u6e32\u67d3\u3002 1 2 3 4 5 6 7 8 9 from indexpy import Index , TemplateResponse from indexpy.http.templates import Jinja2Templates app = Index ( templates = Jinja2Templates ( \"templates\" )) @app . router . http ( \"/\" ) async def homepage (): return TemplateResponse ( \"homepage.html\" ) \u5982\u679c\u4f60\u8981\u4f7f\u7528\u67d0\u4e2a\u6a21\u5757\u4e0b\u7684\u6307\u5b9a\u6587\u4ef6\u5939\u4e2d\u7684\u6a21\u677f\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 Jinja2Templates(\"module_name:dirname\") \u3002\u4f60\u8fd8\u53ef\u4ee5\u4f20\u9012\u591a\u4e2a\u76ee\u5f55\u8ba9 Jinja2 \u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u6a21\u677f\uff0c\u4f8b\u5982\uff1a Jinja2Templates(\"templates\", \"module_name:dirname\") \u3002","title":"Jinja2 \u6a21\u677f\u5f15\u64ce"},{"location":"http.html#_5","text":"\u901a\u8fc7\u7ee7\u627f indexpy.templates.BaseTemplates \u5e76\u5b9e\u73b0 TemplateResponse \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u6a21\u677f\u5f15\u64ce\u7c7b\u3002","title":"\u5176\u4ed6\u6a21\u677f\u5f15\u64ce"},{"location":"http.html#sendeventresponse","text":"\u901a\u8fc7 SendEventResponse \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Server-sent Events \u54cd\u5e94\uff0c\u8fd9\u662f\u4e00\u79cd HTTP \u957f\u8fde\u63a5\u54cd\u5e94\uff0c\u53ef\u5e94\u7528\u4e8e\u670d\u52a1\u5668\u5b9e\u65f6\u63a8\u9001\u6570\u636e\u5230\u5ba2\u6237\u7aef\u7b49\u573a\u666f\u3002 SendEventResponse \u9664\u4e86\u53ef\u4ee5\u63a5\u53d7\u8bf8\u5982 status_code \u3001 headers \u7b49\u5e38\u89c4\u53c2\u6570\u5916\uff0c\u8fd8\u9700\u8981\u81ea\u884c\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u6d88\u606f\u7684\u5f02\u6b65\u751f\u6210\u5668\u3002\u4f20\u5165\u7684\u5f02\u6b65\u751f\u6210\u5668 yield \u7684\u6bcf\u4e00\u6761\u6d88\u606f\u90fd\u9700\u8981\u4e3a\u5408\u89c4\u7684 Server-Sent Event \u6d88\u606f\uff08 indexpy.ServerSentEvent \u7c7b\u578b\uff09\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6bcf\u9694\u4e00\u79d2\u53d1\u9001\u4e00\u6761 hello \u6d88\u606f\u3001\u4e00\u5171\u53d1\u9001\u4e00\u767e\u96f6\u4e00\u6761\u6d88\u606f\u7684\u6837\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from indexpy import Index , SendEventResponse app = Index () @app . router . http ( \"/message\" ) async def message (): async def message_gen (): for i in range ( 101 ): await asyncio . sleep ( 1 ) yield { \"id\" : i , \"data\" : \"hello\" } return SendEventResponse ( message_gen ())","title":"SendEventResponse"},{"location":"http.html#_6","text":"\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex-py \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5904\u7406\u5668\u8fd4\u56de\u7684\u975e HttpResponse \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e HttpResponse \u5bf9\u8c61\u8f6c\u6362\u4e3a HttpResponse \u5bf9\u8c61\u3002 \u5982\u679c\u9700\u8981\u624b\u52a8\u628a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a HttpResponse \u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 indexpy.responses.convert_response \u3002 \u5728\u4e0b\u4f8b\u4e2d\uff0c\u89c6\u56fe\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a dict \u5bf9\u8c61\uff0c\u4f46\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u5374\u662f\u4e00\u4e2a JSON\u3002\u8fd9\u662f\u56e0\u4e3a Index-py \u5185\u7f6e\u4e86\u4e00\u4e9b\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u5e38\u89c1\u7684\u7c7b\u578b\uff1a dict | tuple | list \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a JSONResponse str | bytes \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a PlainTextResponse typing.AsyncGeneratorType \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a SendEventResponse pathlib.PurePath \uff1a\u81ea\u52a8\u8f6c\u6362\u4e3a FileResponse 1 2 async def get_detail (): return { \"key\" : \"value\" } \u4f60\u8fd8\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u6765\u81ea\u5b9a\u4e49 HTTP Status \u548c HTTP Headers\uff1a 1 2 3 4 5 6 async def not_found (): return { \"message\" : \"Not found\" }, 404 async def no_content (): return \"\" , 301 , { \"location\" : \"https://index-py.aber.sh\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5f53\u4f60\u5728\u89c6\u56fe\u51fd\u6570\u91cc\u8fd4\u56de Error \u5bf9\u8c61\u65f6\uff0c\u5b83\u90fd\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\u4e3a JSONResponse \uff0c\u5e76\u4e14\u72b6\u6001\u7801\u9ed8\u8ba4\u4e3a 400 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from dataclasses import dataclass , asdict from typing import Mapping from indexpy.http.responses import automatic , HttpResponse , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 , headers : Mapping [ str , str ] = None ) -> HttpResponse : return JSONResponse ( asdict ( error ), status , headers ) \u6216\u8005\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684 tuple / list / dict \u6240\u5bf9\u5e94\u7684 JSONResponse \uff1a 1 2 3 4 5 6 7 8 9 10 from indexpy.responses import automatic , HttpResponse ... @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _more_json ( body : dict , status : int = 200 , headers : dict = None ) -> HttpResponse : return CustomizeJSONResponse ( body , status , headers )","title":"\u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5"},{"location":"http.html#_7","text":"","title":"\u5f02\u5e38\u5904\u7406"},{"location":"http.html#httpexception","text":"\u5176\u53c2\u6570\u7b7e\u540d\u662f\uff1a HTTPException(status_code: int, headers: dict = None, content: typing.Any = None) \u4f60\u53ef\u4ee5\u901a\u8fc7\u629b\u51fa HTTPException \u6765\u8fd4\u56de\u4e00\u4e2a HTTP \u54cd\u5e94\uff08\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u53d8\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u5f02\u5e38\u629b\u51fa\uff0cIndex-py \u4f1a\u5c06\u5b83\u53d8\u6210\u4e00\u4e2a\u666e\u901a\u7684\u54cd\u5e94\u5bf9\u8c61\uff09\u3002\u5982\u679c\u4f60\u6ca1\u6709\u7ed9\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3a bytes \u6216 str \u7684 content \u503c\uff0c\u90a3\u4e48\u5b83\u5c06\u4f7f\u7528 Python \u6807\u51c6\u5e93\u4e2d\u7684 http.HTTPStatus(status_code).description \u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 1 2 3 4 5 6 7 from indexpy.http import HTTPException async def endpoint (): ... raise HTTPException ( 400 ) ... \u6709\u65f6\u5019\u4e5f\u8bb8\u4f60\u60f3\u8fd4\u56de\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u50cf\u4f7f\u7528 HttpResponse \u4e00\u6837\u4e3a\u5b83\u4f20\u9012 content \u3001 headers \u53c2\u6570\u6765\u63a7\u5236\u6700\u7ec8\u5b9e\u9645\u7684\u54cd\u5e94\u5bf9\u8c61\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 from indexpy.http import HTTPException async def endpoint (): ... raise HTTPException ( 405 , headers = { \"Allow\" : \"HEAD, GET, POST\" }) ...","title":"HTTPException"},{"location":"http.html#_8","text":"\u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex-py \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4f60\u53ef\u4ee5\u6355\u6349\u6307\u5b9a\u7684 HTTP \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u5728\u5e94\u5bf9\u5305\u542b\u5bf9\u5e94 HTTP \u72b6\u6001\u7801\u7684 HTTPException \u5f02\u5e38\u65f6\uff0cIndex-py \u4f1a\u4f7f\u7528\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u800c\u4e0d\u662f\u9ed8\u8ba4\u884c\u4e3a\u3002\u4f60\u4e5f\u53ef\u4ee5\u6355\u6349\u5176\u4ed6\u7ee7\u627f\u81ea Exception \u7684\u5f02\u5e38\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u8fd4\u56de\u6307\u5b9a\u7684\u5185\u5bb9\u7ed9\u5ba2\u6237\u7aef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index , HTTPException , HttpResponse , PlainTextResponse app = Index () @app . exception_handler ( 404 ) async def not_found ( exc : HTTPException ) -> HttpResponse : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) async def value_error ( exc : ValueError ) -> HttpResponse : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) \u9664\u4e86\u88c5\u9970\u5668\u6ce8\u518c\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u5f0f\u7684\u6ce8\u518c\u65b9\u5f0f\uff0c\u4e0b\u4f8b\u4e0e\u4e0a\u4f8b\u7b49\u4ef7\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy import Index , HTTPException , HttpResponse , PlainTextResponse async def not_found ( exc : HTTPException ) -> HttpResponse : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) async def value_error ( exc : ValueError ) -> HttpResponse : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) app = Index ( exception_handlers = { 404 : not_found , ValueError : value_error , })","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406"},{"location":"http.html#_9","text":"","title":"\u5185\u7f6e\u4e2d\u95f4\u4ef6"},{"location":"http.html#cors","text":"\u5728\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u89e3\u51b3\u8de8\u57df\u95ee\u9898\u4e00\u822c\u4f7f\u7528 Cross-Origin Resource Sharing \uff0c\u5728 Index-py \u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u5feb\u901f\u914d\u7f6e API \u5141\u8bb8\u8de8\u57df\u3002 1 2 3 4 5 from indexpy import Routes from indexpy.middlewares import CORSMiddleware routes = Routes ( ... , http_middlewares = [ CORSMiddleware ()]) CORSMiddleware \u6709\u5982\u4e0b\u9009\u9879\uff1a allow_origins: Iterable[Pattern] \uff1a\u5141\u8bb8\u7684 Origin\uff0c\u9700\u8981 re.compile \u9884\u7f16\u8bd1\u540e\u7684 Pattern \u5bf9\u8c61\uff1b\u9ed8\u8ba4\u503c\u4e3a (re.compile(\".*\"), ) allow_methods: Iterable[str] \uff1a\u5141\u8bb8\u7684\u8bf7\u6c42\u65b9\u6cd5\uff1b\u9ed8\u8ba4\u503c\u4e3a (\"GET\"\uff0c\"POST\"\uff0c\"PUT\"\uff0c\"PATCH\"\uff0c\"DELETE\"\uff0c\"HEAD\"\uff0c\"OPTIONS\"\uff0c\"TRACE\") \u3002 allow_headers: Iterable[str] \uff1a\u5141\u8bb8\u7684\u8bf7\u6c42\u5934\uff0c\u5bf9\u5e94 Access-Control-Allow-Headers \u3002 expose_headers: Iterable[str] \uff1a\u80fd\u5728\u54cd\u5e94\u4e2d\u5217\u51fa\u7684\u8bf7\u6c42\u5934\uff0c\u5bf9\u5e94 Access-Control-Expose-Headers \u3002 allow_credentials: bool \uff1a\u4e3a\u771f\u65f6\u5219\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u643a\u5e26 Cookies\uff0c\u53cd\u4e4b\u4e0d\u5141\u8bb8\uff1b\u9ed8\u8ba4\u4e3a False \u3002 max_age: int \uff1a\u9884\u8bf7\u6c42\u7684\u7f13\u5b58\u65f6\u95f4\uff1b\u9ed8\u8ba4\u4e3a 600 \u79d2\u3002","title":"CORS"},{"location":"parameters.html","text":"Index-py \u4f7f\u7528 pydantic \u7528\u4e8e\u66f4\u8f7b\u677e\u7684\u89e3\u6790 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u5e76\u4e3a\u4e4b\u7ed1\u5b9a\u4e86\u4e00\u5957\u751f\u6210 OpenAPI \u6587\u6863\u7684\u7a0b\u5e8f\u3002 \u663e\u793a OpenAPI \u6587\u6863 \u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb Index-py \u4e2d\u3002\u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002 \u5982\u679c\u4f60\u4e0d\u9700\u8981\u751f\u6210\u6587\u6863\uff0c\u4ec5\u4ec5\u53ea\u9700\u8981\u81ea\u52a8\u6821\u9a8c\u53c2\u6570\u529f\u80fd\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u8df3\u8fc7\u3002 1 2 3 4 5 6 from indexpy import Index from indexpy.openapi import OpenAPI app = Index () app . router << ( \"/openapi\" // OpenAPI ( \"Title\" , \"description\" , \"1.0\" ) . routes ) \u9ed8\u8ba4\u7684\u6587\u6863\u6a21\u677f\u4f7f\u7528 swagger \uff0c\u5982\u679c\u4f60\u66f4\u559c\u6b22 redoc \u6216 rapidoc \u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 template_name \u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f8b\u5982\uff1a OpenAPI(..., template_name=\"redoc\") \u3002 \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 template \u53c2\u6570\u6765\u63a7\u5236\u663e\u793a\u81ea\u5df1\u7684\u559c\u6b22\u7684\u4efb\u4f55\u6a21\u677f\uff0c\u53ea\u9700\u8981\u628a\u6a21\u677f\u7684\u5b8c\u6574\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u7ed9 template \u53c2\u6570\u5373\u53ef\u3002 API Tags OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index-py \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684\u5206\u7c7b\u6807\u7b7e\u3002 tags \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a dict \u7c7b\u578b\uff0c\u952e\u4e3a\u6807\u7b7e\u540d\u3002\u503c\u9700\u8981\u5305\u542b description \uff0c\u7528\u4e8e\u63cf\u8ff0\u6b64\u6807\u7b7e\uff1b paths \u662f URL \u5217\u8868\uff0c\u5982\u679c URL \u5305\u542b\u8def\u5f84\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0d\u5e26 :type \u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 OpenAPI ( title = \"index.py example\" , description = \"just a example, power by index.py\" , version = \"v1\" , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/ {username} \" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/ {username} \" ], }, }, ) \u63a5\u53e3\u63cf\u8ff0 \u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002\u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002\u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from indexpy import HTTPView async def handler ( request ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\" class ClassHandler ( HTTPView ): async def get ( self ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\" \u6807\u6ce8\u8bf7\u6c42\u53c2\u6570 \u5148\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4e24\u4e2a\u5206\u9875\u53c2\u6570\uff0c\u9996\u5148\u901a\u8fc7 Type hint \u6807\u6ce8\u5b83\u4eec\u90fd\u9700\u8981 int \u7c7b\u578b\uff0c\u5728\u7ed9\u4e88\u5b83\u4eec Query(...) \u4f5c\u4e3a\u503c\uff0c Query \u4ee3\u8868\u5b83\u4eec\u5c06\u4f1a\u4ece request.query_params \u4e2d\u8bfb\u53d6\u503c\uff0c ... \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u610f\u5473\u7740\u5b83\u6ca1\u6709\u9ed8\u8ba4\u503c\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u8be5\u63a5\u53e3\u65f6\u5fc5\u987b\u4f20\u9012\u503c\u3002\u8b6c\u5982\uff1a ?page_num=1&page_size=10 \u3002\u5982\u679c\u4f60\u4f7f\u7528 Query(10) \u5219\u610f\u5473\u7740\u8fd9\u4e2a\u503c\u53ef\u4ee5\u4e0d\u7531\u524d\u7aef\u4f20\u9012\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a 10 \u3002 1 2 3 4 5 6 7 8 9 from indexpy import Query async def getlist ( request , page_num : int = Query ( ... ), page_size : int = Query ( ... ) ): ... \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ee7\u627f\u81ea pydantic.BaseModel \u7684\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3\u6765\u63cf\u8ff0\u540c\u4e00\u7c7b\u578b\u7684\u5168\u90e8\u53c2\u6570\uff0c\u901a\u8fc7\u7c7b\u7684\u7ee7\u627f\u53ef\u4ee5\u505a\u5230\u590d\u7528\u53c2\u6570\u3002\u4e0b\u4f8b\u4e0e\u4e0a\u4f8b\u662f\u7b49\u4ef7\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import Query from pydantic import BaseModel class PageQuery ( BaseModel ): page_num : int page_size : int async def getlist ( query : PageQuery = Query ( exclusive = True )): ... \u540c\u6837\u7684\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5bf9\u8c61\u6765\u83b7\u53d6\u5bf9\u5e94\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4ee5\u4e0b\u662f\u5bf9\u7167\uff1a Path \uff1a request.path_params Query \uff1a request.query_params Header \uff1a request.headers Cookie \uff1a request.cookies Body \uff1a await request.data() \u901a\u8fc7\u8fd9\u6837\u6807\u6ce8\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u4e0d\u4ec5\u4f1a\u81ea\u52a8\u6821\u9a8c\u3001\u8f6c\u6362\u7c7b\u578b\uff0c\u8fd8\u80fd\u81ea\u52a8\u751f\u6210\u63a5\u53e3\u6587\u6863\u3002\u5728\u4f60\u9700\u8981\u63a5\u53e3\u6587\u6863\u7684\u60c5\u51b5\u4e0b\uff0c\u5341\u5206\u63a8\u8350\u8fd9\u4e48\u4f7f\u7528\u3002 \u6216\u8bb8\u6709\u65f6\u5019\u4f60\u9700\u8981\u76f4\u63a5\u8bfb\u53d6 request \u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u4ee5\u914d\u5408\u4e2d\u95f4\u4ef6\u4f7f\u7528\u3002 \u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5f53 code \u88ab\u8c03\u7528\u65f6\u4f1a\u81ea\u52a8\u8bfb\u53d6 request.user \u5e76\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u51fd\u6570\u4e2d\u3002 1 2 3 4 5 6 from indexpy import Request from yourmodule import User async def code ( user : User = Request ()): ... \u5f53\u9700\u8981\u8bfb\u53d6\u7684\u5c5e\u6027\u540d\u79f0\u4e0d\u80fd\u4f5c\u4e3a\u53c2\u6570\u540d\u79f0\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e3a Request \u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5c5e\u6027\u540d\u8fdb\u884c\u8bfb\u53d6\u3002\u5982\u4e0b\u4f8b\u6240\u793a\uff0c request.user.name \u5c06\u4f1a\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 username \u4f20\u5165\u51fd\u6570\u4e2d\u3002 1 2 3 4 5 from indexpy import Request async def code ( username : str = Request ( alias = \"user.name\" )): ... \u63cf\u8ff0\u54cd\u5e94\u7ed3\u679c \u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex-py \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002 describe_response \u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d status \u4e3a\u5fc5\u9700\u9879\uff0c description \u3001 content \u3001 headers \u548c links \u4e3a\u53ef\u9009\u9879\uff0c\u5bf9\u5e94 OpenAPI Specification \u91cc\u7684\u540c\u540d\u5b57\u6bb5\u3002 \u5176\u4e2d\uff0c content \u65e2\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u5bf9\u8c61\u6216 pydantic.BaseModel \u7684\u6d3e\u751f\u5b50\u7c7b\u63cf\u8ff0\u54cd\u5e94\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7b26\u5408 OpenAPI \u6587\u6863\u7684 Dict\uff08\u5f53\u4f60\u63cf\u8ff0\u8fd4\u56de\u4e00\u4e2a\u975e application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\u8fd9\u5f88\u6709\u7528\uff09\u3002 \u5982\u679c description \u7684\u503c\u4e3a\u9ed8\u8ba4\u7684 \"\" \uff0c\u5219\u4f1a\u4f7f\u7528 http \u6807\u51c6\u5e93\u4e2d\u7684 HTTPStatus(status).description \u4f5c\u4e3a\u63cf\u8ff0\u3002 1 2 3 4 5 6 7 8 9 10 from http import HTTPStatus from indexpy.openapi import describe_response @describe_response ( HTTPStatus . NO_CONTENT ) def handler (): \"\"\" ................. \"\"\" \u9664\u4e86 describe_response \u63cf\u8ff0\u5355\u4e2a\u54cd\u5e94\u72b6\u6001\u7801\u4ee5\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 describe_responses \u5bf9\u72b6\u6001\u7801\u6279\u91cf\u7684\u63cf\u8ff0\u3002\u5b57\u5178\u4ee5 status \u4e3a\u952e\uff0c\u4ee5 OpenAPI Response Object \u7684\u56db\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u53ef\u9009\u7684\u503c\uff08\u5176\u4e2d description \u4e3a\u5fc5\u9009\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy.openapi import describe_responses RESPONSES = { 404 : { \"description\" : \"Item not found\" }, 403 : { \"description\" : \"Not enough privileges\" }, 302 : { \"description\" : \"The item was moved\" }, } @describe_responses ( RESPONSES ) @describe_response ( 204 , \"No Content\" ) def handler (): \"\"\" ................. \"\"\" \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002 \u63cf\u8ff0\u989d\u5916\u7684 OpenAPI \u6587\u6863 \u4f5c\u4e3a\u4e00\u4e2a Web \u9879\u76ee\uff0c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8bfb\u53d6\u8bf7\u6c42\u4fe1\u606f\u5e76\u4f5c\u9650\u5236\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f8b\u5982\u8bfb\u53d6 JWT \u7528\u4f5c\u9274\u6743\u3002\u5728\u6bcf\u4e2a\u89c6\u56fe\u90fd\u589e\u52a0 header \u53c2\u6570\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u8fd9\u65f6\u5019 describe_extra_docs \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 describe_extra_docs \u589e\u52a0\u7684\u5185\u5bb9\uff0c\u4e0d\u4ec5\u9650\u4e8e parameters \uff0c\u4efb\u4f55\u63cf\u8ff0\u90fd\u4f1a\u88ab\u5408\u5e76\u8fdb\u539f\u672c\u7684\u6587\u6863\u91cc\u3002\u5177\u4f53\u7684\u5b57\u6bb5\u53ef\u53c2\u8003 OpenAPI Specification \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def judge_jwt ( endpoint ): describe_extra_docs ( endpoint , { \"parameters\" : [ { \"name\" : \"Authorization\" , \"in\" : \"header\" , \"description\" : \"JWT Token\" , \"required\" : True , \"schema\" : { \"type\" : \"string\" }, } ] }, ) async def judge ( request ): ... return judge","title":"Parameters"},{"location":"parameters.html#openapi","text":"\u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb Index-py \u4e2d\u3002\u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002 \u5982\u679c\u4f60\u4e0d\u9700\u8981\u751f\u6210\u6587\u6863\uff0c\u4ec5\u4ec5\u53ea\u9700\u8981\u81ea\u52a8\u6821\u9a8c\u53c2\u6570\u529f\u80fd\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u8df3\u8fc7\u3002 1 2 3 4 5 6 from indexpy import Index from indexpy.openapi import OpenAPI app = Index () app . router << ( \"/openapi\" // OpenAPI ( \"Title\" , \"description\" , \"1.0\" ) . routes ) \u9ed8\u8ba4\u7684\u6587\u6863\u6a21\u677f\u4f7f\u7528 swagger \uff0c\u5982\u679c\u4f60\u66f4\u559c\u6b22 redoc \u6216 rapidoc \u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 template_name \u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f8b\u5982\uff1a OpenAPI(..., template_name=\"redoc\") \u3002 \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 template \u53c2\u6570\u6765\u63a7\u5236\u663e\u793a\u81ea\u5df1\u7684\u559c\u6b22\u7684\u4efb\u4f55\u6a21\u677f\uff0c\u53ea\u9700\u8981\u628a\u6a21\u677f\u7684\u5b8c\u6574\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u7ed9 template \u53c2\u6570\u5373\u53ef\u3002","title":"\u663e\u793a OpenAPI \u6587\u6863"},{"location":"parameters.html#api-tags","text":"OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index-py \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684\u5206\u7c7b\u6807\u7b7e\u3002 tags \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a dict \u7c7b\u578b\uff0c\u952e\u4e3a\u6807\u7b7e\u540d\u3002\u503c\u9700\u8981\u5305\u542b description \uff0c\u7528\u4e8e\u63cf\u8ff0\u6b64\u6807\u7b7e\uff1b paths \u662f URL \u5217\u8868\uff0c\u5982\u679c URL \u5305\u542b\u8def\u5f84\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0d\u5e26 :type \u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 OpenAPI ( title = \"index.py example\" , description = \"just a example, power by index.py\" , version = \"v1\" , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/ {username} \" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/ {username} \" ], }, }, )","title":"API Tags"},{"location":"parameters.html#_1","text":"\u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002\u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002\u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from indexpy import HTTPView async def handler ( request ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\" class ClassHandler ( HTTPView ): async def get ( self ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\"","title":"\u63a5\u53e3\u63cf\u8ff0"},{"location":"parameters.html#_2","text":"\u5148\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4e24\u4e2a\u5206\u9875\u53c2\u6570\uff0c\u9996\u5148\u901a\u8fc7 Type hint \u6807\u6ce8\u5b83\u4eec\u90fd\u9700\u8981 int \u7c7b\u578b\uff0c\u5728\u7ed9\u4e88\u5b83\u4eec Query(...) \u4f5c\u4e3a\u503c\uff0c Query \u4ee3\u8868\u5b83\u4eec\u5c06\u4f1a\u4ece request.query_params \u4e2d\u8bfb\u53d6\u503c\uff0c ... \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u610f\u5473\u7740\u5b83\u6ca1\u6709\u9ed8\u8ba4\u503c\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u8be5\u63a5\u53e3\u65f6\u5fc5\u987b\u4f20\u9012\u503c\u3002\u8b6c\u5982\uff1a ?page_num=1&page_size=10 \u3002\u5982\u679c\u4f60\u4f7f\u7528 Query(10) \u5219\u610f\u5473\u7740\u8fd9\u4e2a\u503c\u53ef\u4ee5\u4e0d\u7531\u524d\u7aef\u4f20\u9012\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a 10 \u3002 1 2 3 4 5 6 7 8 9 from indexpy import Query async def getlist ( request , page_num : int = Query ( ... ), page_size : int = Query ( ... ) ): ... \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ee7\u627f\u81ea pydantic.BaseModel \u7684\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3\u6765\u63cf\u8ff0\u540c\u4e00\u7c7b\u578b\u7684\u5168\u90e8\u53c2\u6570\uff0c\u901a\u8fc7\u7c7b\u7684\u7ee7\u627f\u53ef\u4ee5\u505a\u5230\u590d\u7528\u53c2\u6570\u3002\u4e0b\u4f8b\u4e0e\u4e0a\u4f8b\u662f\u7b49\u4ef7\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import Query from pydantic import BaseModel class PageQuery ( BaseModel ): page_num : int page_size : int async def getlist ( query : PageQuery = Query ( exclusive = True )): ... \u540c\u6837\u7684\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5bf9\u8c61\u6765\u83b7\u53d6\u5bf9\u5e94\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4ee5\u4e0b\u662f\u5bf9\u7167\uff1a Path \uff1a request.path_params Query \uff1a request.query_params Header \uff1a request.headers Cookie \uff1a request.cookies Body \uff1a await request.data() \u901a\u8fc7\u8fd9\u6837\u6807\u6ce8\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u4e0d\u4ec5\u4f1a\u81ea\u52a8\u6821\u9a8c\u3001\u8f6c\u6362\u7c7b\u578b\uff0c\u8fd8\u80fd\u81ea\u52a8\u751f\u6210\u63a5\u53e3\u6587\u6863\u3002\u5728\u4f60\u9700\u8981\u63a5\u53e3\u6587\u6863\u7684\u60c5\u51b5\u4e0b\uff0c\u5341\u5206\u63a8\u8350\u8fd9\u4e48\u4f7f\u7528\u3002 \u6216\u8bb8\u6709\u65f6\u5019\u4f60\u9700\u8981\u76f4\u63a5\u8bfb\u53d6 request \u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u4ee5\u914d\u5408\u4e2d\u95f4\u4ef6\u4f7f\u7528\u3002 \u5982\u4e0b\u4f8b\u6240\u793a\uff0c\u5f53 code \u88ab\u8c03\u7528\u65f6\u4f1a\u81ea\u52a8\u8bfb\u53d6 request.user \u5e76\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u5165\u51fd\u6570\u4e2d\u3002 1 2 3 4 5 6 from indexpy import Request from yourmodule import User async def code ( user : User = Request ()): ... \u5f53\u9700\u8981\u8bfb\u53d6\u7684\u5c5e\u6027\u540d\u79f0\u4e0d\u80fd\u4f5c\u4e3a\u53c2\u6570\u540d\u79f0\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4e3a Request \u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5c5e\u6027\u540d\u8fdb\u884c\u8bfb\u53d6\u3002\u5982\u4e0b\u4f8b\u6240\u793a\uff0c request.user.name \u5c06\u4f1a\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 username \u4f20\u5165\u51fd\u6570\u4e2d\u3002 1 2 3 4 5 from indexpy import Request async def code ( username : str = Request ( alias = \"user.name\" )): ...","title":"\u6807\u6ce8\u8bf7\u6c42\u53c2\u6570"},{"location":"parameters.html#_3","text":"\u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex-py \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002 describe_response \u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d status \u4e3a\u5fc5\u9700\u9879\uff0c description \u3001 content \u3001 headers \u548c links \u4e3a\u53ef\u9009\u9879\uff0c\u5bf9\u5e94 OpenAPI Specification \u91cc\u7684\u540c\u540d\u5b57\u6bb5\u3002 \u5176\u4e2d\uff0c content \u65e2\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u5bf9\u8c61\u6216 pydantic.BaseModel \u7684\u6d3e\u751f\u5b50\u7c7b\u63cf\u8ff0\u54cd\u5e94\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7b26\u5408 OpenAPI \u6587\u6863\u7684 Dict\uff08\u5f53\u4f60\u63cf\u8ff0\u8fd4\u56de\u4e00\u4e2a\u975e application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\u8fd9\u5f88\u6709\u7528\uff09\u3002 \u5982\u679c description \u7684\u503c\u4e3a\u9ed8\u8ba4\u7684 \"\" \uff0c\u5219\u4f1a\u4f7f\u7528 http \u6807\u51c6\u5e93\u4e2d\u7684 HTTPStatus(status).description \u4f5c\u4e3a\u63cf\u8ff0\u3002 1 2 3 4 5 6 7 8 9 10 from http import HTTPStatus from indexpy.openapi import describe_response @describe_response ( HTTPStatus . NO_CONTENT ) def handler (): \"\"\" ................. \"\"\" \u9664\u4e86 describe_response \u63cf\u8ff0\u5355\u4e2a\u54cd\u5e94\u72b6\u6001\u7801\u4ee5\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 describe_responses \u5bf9\u72b6\u6001\u7801\u6279\u91cf\u7684\u63cf\u8ff0\u3002\u5b57\u5178\u4ee5 status \u4e3a\u952e\uff0c\u4ee5 OpenAPI Response Object \u7684\u56db\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u53ef\u9009\u7684\u503c\uff08\u5176\u4e2d description \u4e3a\u5fc5\u9009\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy.openapi import describe_responses RESPONSES = { 404 : { \"description\" : \"Item not found\" }, 403 : { \"description\" : \"Not enough privileges\" }, 302 : { \"description\" : \"The item was moved\" }, } @describe_responses ( RESPONSES ) @describe_response ( 204 , \"No Content\" ) def handler (): \"\"\" ................. \"\"\" \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002","title":"\u63cf\u8ff0\u54cd\u5e94\u7ed3\u679c"},{"location":"parameters.html#openapi_1","text":"\u4f5c\u4e3a\u4e00\u4e2a Web \u9879\u76ee\uff0c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8bfb\u53d6\u8bf7\u6c42\u4fe1\u606f\u5e76\u4f5c\u9650\u5236\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f8b\u5982\u8bfb\u53d6 JWT \u7528\u4f5c\u9274\u6743\u3002\u5728\u6bcf\u4e2a\u89c6\u56fe\u90fd\u589e\u52a0 header \u53c2\u6570\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u8fd9\u65f6\u5019 describe_extra_docs \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 describe_extra_docs \u589e\u52a0\u7684\u5185\u5bb9\uff0c\u4e0d\u4ec5\u9650\u4e8e parameters \uff0c\u4efb\u4f55\u63cf\u8ff0\u90fd\u4f1a\u88ab\u5408\u5e76\u8fdb\u539f\u672c\u7684\u6587\u6863\u91cc\u3002\u5177\u4f53\u7684\u5b57\u6bb5\u53ef\u53c2\u8003 OpenAPI Specification \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def judge_jwt ( endpoint ): describe_extra_docs ( endpoint , { \"parameters\" : [ { \"name\" : \"Authorization\" , \"in\" : \"header\" , \"description\" : \"JWT Token\" , \"required\" : True , \"schema\" : { \"type\" : \"string\" }, } ] }, ) async def judge ( request ): ... return judge","title":"\u63cf\u8ff0\u989d\u5916\u7684 OpenAPI \u6587\u6863"},{"location":"route.html","text":"Index-py \u7684\u8def\u7531\u57fa\u4e8e Radix Tree \u3002 \u57fa\u672c\u7528\u6cd5 \u4f7f\u7528\u88c5\u9970\u5668 \u4e0e bottle/flask \u4e4b\u7c7b\u7684\u6846\u67b6\u4e00\u6837\uff0cIndex-py \u652f\u6301\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u8def\u7531\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\uff0c name \u662f\u8def\u7531\u540d\u79f0\uff0c\u8fd9\u5728\u53cd\u5411\u67e5\u627e\u8def\u7531\u65f6\u4f1a\u8d77\u5230\u4f5c\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) async def hello (): ... @app . router . websocket ( \"/hello\" , name = \"hello_ws\" ) async def hello_ws (): ... \u5982\u679c name \u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u88ab\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u7684 __name__ \u5c5e\u6027\u3002 \u5982\u679c\u6307\u5b9a\u8def\u7531\u7684 name \u4e3a None \uff0c\u5219\u65e0\u6cd5\u901a\u8fc7 name \u67e5\u627e\u5230\u8be5\u8def\u7531\u3002 \u8def\u7531\u5bf9\u8c61 \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u8def\u7531\u7533\u660e\u65b9\u5f0f\u662f\u5982\u4e0b\u65b9\u6cd5\u7684\u5feb\u6377\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () async def hello (): return \"hello world\" async def hello_ws (): ... ( app . router << HttpRoute ( \"/hello\" , hello , name = \"hello\" ) << SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ) ) Index-py \u7684\u8def\u7531\u5bf9\u8c61\u6709\u4e24\u79cd\uff0c\u5206\u522b\u5bf9\u5e94 Http \u548c WebSocket \u65b9\u6cd5\u3002 1 2 3 4 5 # Http HttpRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) # WebSocket SocketRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) path \u6307\u5b9a\u8def\u7531\u80fd\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32 endpoint \u6307\u5b9a\u8def\u7531\u5bf9\u5e94\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 name \u4e3a\u8def\u7531\u6307\u5b9a\u540d\u79f0\uff0c name \u4e3a None \u65f6\uff0c\u6b64\u8def\u7531\u5c06\u6ca1\u6709\u540d\u79f0\uff1b name \u4e3a \"\" \u65f6\uff0c\u5c06\u81ea\u52a8\u8bfb\u53d6 endpoint.__name__ \u4f5c\u4e3a\u8def\u7531\u540d\u79f0\u3002 \u9884\u5904\u7406 \u4f7f\u7528\u8def\u7531\u5bf9\u8c61\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 endpoint\uff0cIndex-py \u4f1a\u81ea\u52a8\u4e3a\u5176\u6ce8\u518c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u4e8e\u5904\u7406\u90e8\u5206\u53c2\u6570\u7684\u81ea\u52a8\u6821\u9a8c\u548c\u6ce8\u5165\u3002 \u4e2d\u95f4\u4ef6 \u4f60\u53ef\u4ee5\u5bf9\u8def\u7531\u5bf9\u8c61\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u8fd9\u5c06\u4f1a\u4f5c\u7528\u5230 endpoint \u4e0a\uff0c\u4f46\u4e0e\u76f4\u63a5\u5bf9 endpoint \u4f7f\u7528\u88c5\u9970\u5668\u4e0d\u540c\u7684\u662f\u5b83\u4f5c\u7528\u4e8e Index-py \u9884\u5904\u7406\u540e\u7684 endpoint \u4e0a\u3002 \u4f60\u53ef\u4ee5\u5728\u6ce8\u518c\u7684\u4e2d\u95f4\u4ef6\u91cc\u6355\u6349\u5230\u53ef\u80fd\u629b\u51fa\u7684\u53c2\u6570\u6821\u9a8c\u5f02\u5e38\u3002 \u5728\u672c\u6587\u6863\u91cc\uff0c\u8fd9\u6837\u6ce8\u518c\u7684\u88c5\u9970\u5668\u88ab\u79f0\u4e3a\u4e2d\u95f4\u4ef6\u3002\u201c\u4e2d\u95f4\u4ef6\u201d\u8fd9\u4e00\u540d\u79f0\u4e3b\u8981\u662f\u4e3a\u4e86\u6cbf\u7528\u5176\u4ed6\u6846\u67b6\u4e2d\u7684\u8bf4\u6cd5\u3002 1 HttpRoute ( ... ) @ decorator \u50cf\u6ce8\u518c\u666e\u901a\u7684\u88c5\u9970\u5668\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u6ce8\u518c\u591a\u4e2a\uff1b\u6267\u884c\u987a\u5e8f\u4e5f\u4e00\u6837\uff0c\u7531\u8fdc\u5230\u8fd1\u7684\u6267\u884c\u3002 1 HttpRoute ( ... ) @ decorator1 @ decorator2 @ decorator3 \u5e76\u4e14\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u5728\u4f7f\u7528\u88c5\u9970\u5668\u8fdb\u884c\u8def\u7531\u6ce8\u518c\u65f6\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u5176\u6267\u884c\u987a\u5e8f\u540c\u6837\u662f\u7531\u53f3\u5230\u5de6\u3002 1 2 @app . router . http ( \"/path\" , middlewares = [ decorator1 , decorator2 , decorator3 ]) async def path (): ... \u9650\u5b9a\u8bf7\u6c42\u65b9\u6cd5 \u6307\u5b9a\u652f\u6301 GET \u65b9\u6cd5\u65f6\uff0cHEAD \u5c06\u88ab\u81ea\u52a8\u5141\u8bb8\u3002 \u9650\u5b9a\u4e86\u8bf7\u6c42\u65b9\u6cd5\u540e\uff0cOPTIONS \u7684\u8bf7\u6c42\u5c06\u88ab\u81ea\u52a8\u5904\u7406\u3002\u53cd\u4e4b\uff0c\u4f60\u9700\u8981\u81ea\u884c\u5904\u7406 OPTIONS \u65b9\u6cd5\u3002 \u5728\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u65f6\u53ef\u4ee5\u76f4\u63a5\u9650\u5b9a\u8be5\u8def\u7531\u80fd\u591f\u63a5\u53d7\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4ee5\u4e0b\u4e94\u79cd HTTP \u65b9\u6cd5\u7684\u9650\u5b9a\u3002\u5982\u679c\u4f60\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from indexpy import Index app = Index () @app . router . http . get ( \"/get\" ) async def need_get (): ... @app . router . http . post ( \"/post\" ) async def need_post (): ... @app . router . http . put ( \"/put\" ) async def need_put (): ... @app . router . http . patch ( \"/patch\" ) async def need_patch (): ... @app . router . http . delete ( \"/delete\" ) async def need_delete (): ... \u5982\u4e0a\u4ee3\u7801\u662f\u5728\u5185\u90e8\u4f7f\u7528\u4e86 required_method \u88c5\u9970\u5668\u6765\u8fbe\u5230\u9650\u5b9a\u8bf7\u6c42\u65b9\u6cd5\u7684\u76ee\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u624b\u52a8\u6ce8\u518c\u88c5\u9970\u5668\uff0c\u8fd9\u5c06\u80fd\u9650\u5b9a\u66f4\u591a\u79cd\u7c7b\u7684\u8bf7\u6c42\u3002\u4ee3\u7801\u6837\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy import Index , required_method app = Index () @app . router . http ( \"/get\" ) @required_method ( \"GET\" ) async def need_get (): ... @app . router . http ( \"/connect\" ) @required_method ( \"CONNECT\" ) async def need_connect (): ... \u5217\u8868\u5f0f\u6ce8\u518c Index-py \u540c\u6837\u652f\u6301\u7c7b\u4f3c\u4e8e Django \u7684\u5217\u8868\u5f0f\u5199\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute async def hello (): return \"hello world\" async def hello_ws (): ... app = Index ( routes = [ HttpRoute ( \"/hello\" , hello , name = \"hello\" ), SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ), ]) \u8def\u5f84\u53c2\u6570 \u4f7f\u7528 {name:type} \u53ef\u4ee5\u6807\u6ce8\u8def\u5f84\u53c2\u6570\uff0c\u76ee\u524d\u652f\u6301\u7684\u7c7b\u578b\u6709 str \u3001 int \u3001 decimal \u3001 date \u3001 uuid \u548c path \u3002 \u5982\u679c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u4e3a str \uff0c\u53ef\u4ee5\u5ffd\u7565\u6389 :str \uff0c\u76f4\u63a5\u4f7f\u7528 {name} \u3002 str \u4e0d\u80fd\u5339\u914d\u5230 / \uff0c\u5982\u679c\u9700\u8981\u5339\u914d / \u8bf7\u4f7f\u7528 path \u3002 path \u662f\u6781\u4e3a\u7279\u6b8a\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u53ea\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u7684\u6700\u540e\uff0c\u5e76\u4e14\u80fd\u5339\u914d\u5230\u6240\u6709\u7684\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 from indexpy import Index , request app = Index () @app . router . http ( \"/{username:str}\" ) async def what_is_your_name (): return request . path_params [ \"username\" ] \u53cd\u5411\u67e5\u627e \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7531\u8def\u7531\u540d\u79f0\u53cd\u5411\u751f\u6210\u5bf9\u5e94\u7684 URL \u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 app.router.url_for \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index , request app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-with-name\" ) async def hello (): return f \"hello { request . path_params . get ( 'name' ) } \" assert app . router . url_for ( \"hello\" ) == \"/hello\" assert app . router . url_for ( \"hello-with-name\" , { \"name\" : \"Aber\" }) == \"/hello/Aber\" \u53cd\u5411\u67e5\u627e\u4e2d\uff0c websocket \u4e0e http \u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u901a\u8fc7 protocol \u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u67e5\u627e\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3a http \u3002 \u8def\u7531\u5206\u7ec4 \u5f53\u9700\u8981\u628a\u67d0\u4e00\u4e9b\u8def\u7531\u5f52\u4e3a\u4e00\u7ec4\u65f6\uff0c\u53ef\u4f7f\u7528 Routes \u5bf9\u8c61\u3002 Routes \u5bf9\u8c61\u62e5\u6709 .http \u548c .websocket \u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6ce8\u518c\u8def\u7531\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0e app.router \u76f8\u540c\u3002 Routes \u4e5f\u540c\u6837\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u4f3c\u4e8e Django \u4e00\u6837\u7684\u8def\u7531\u7533\u660e\u65b9\u5f0f\uff0c\u793a\u4f8b\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 from indexpy.routing import Routes , HttpRoute async def hello ( request ): return \"hello world\" routes = Routes ( HttpRoute ( \"/hello\" , hello ), ) \u4f7f\u7528 << \u8fd0\u7b97\u7b26\u5373\u53ef\u6ce8\u518c Routes \u4e2d\u6240\u6709\u8def\u7531\u7ed9 app.router \uff0c\u5e76\u4e14\u8fd9\u4e00\u8fd0\u7b97\u7684\u8fd4\u56de\u7ed3\u679c\u662f app.router \uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\u3002 1 2 3 4 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes app . router << app1_routes << app2_routes \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u521d\u59cb\u5316 Index \u5bf9\u8c61\u65f6\u4f20\u5165\u3002 1 2 3 4 5 from indexpy import Index from .app1.urls import routes as app1_routes app = Index ( routes = app1_routes ) \u8def\u7531\u7ec4\u5408 Routes \u53ef\u4ee5\u8f7b\u677e\u548c\u5176\u4ed6 Routes \u7ec4\u5408\u8d77\u6765\u3002 1 2 3 from .app1.urls import routes as app1_routes routes = Routes ( ... ) << app1_routes \u5e76\u4e14 << \u7684\u7ed3\u679c\u662f\u8fd0\u7b97\u5de6\u4fa7\u7684 Routes \u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u5b83\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes Routes () << app1_routes << app2_routes \u4f60\u4e5f\u53ef\u4ee5\u5408\u5e76\u4e24\u4e2a Routes \u6210\u4e3a\u4e00\u4e2a\u65b0\u7684 Routes \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u4e2d\u4e00\u4e2a\u5408\u5e76\u5230\u53e6\u4e00\u4e2a\u91cc\u3002 1 2 3 4 5 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes new_routes = app1_routes + app2_routes \u540d\u79f0\u7a7a\u95f4 \u4f60\u53ef\u4ee5\u4e3a Routes \u8bbe\u7f6e namespace \u53c2\u6570\uff0c\u8fd9\u5c06\u5728 Routes \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6bcf\u4e2a\u8def\u7531\u540d\u79f0\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u524d\u52a0\u4e0a namespace: \uff0c\u4ee5\u6b64\u6765\u907f\u514d\u4e0d\u540c\u540d\u79f0\u7a7a\u95f4\u5185\u7684\u8def\u7531\u540d\u79f0\u51b2\u7a81\u3002 1 routes = Routes ( ... , namespace = \"namespace\" ) \u5728\u4f7f\u7528 app.router.url_for \u65f6\u4e0d\u8981\u5fd8\u8bb0\u52a0\u4e0a\u8def\u7531\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u524d\u7f00\u3002 \u4e2d\u95f4\u4ef6\u6ce8\u518c \u901a\u8fc7 Routes \u4f60\u53ef\u4ee5\u4e3a\u6574\u7ec4\u8def\u7531\u6ce8\u518c\u4e00\u4e2a\u6216\u591a\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4ee5\u4e0b\u4e3a\u7b80\u5355\u7684\u6837\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def one_http_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper def one_socket_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper routes = Routes ( ... , http_middlewares = [ one_http_middleware ], socket_middlewares = [ one_socket_middleware ], ) \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u6765\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4e0e\u4e0a\u4f8b\u7684\u7ed3\u679c\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 routes = Routes ( ... ) @routes . http_middleware def one_http_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper @routes . socket_middleware def one_socket_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper \u516c\u5171\u524d\u7f00 \u6709\u65f6\u5019\u67d0\u4e00\u7ec4\u7684\u8def\u7531\u6211\u4eec\u5e0c\u671b\u653e\u5230\u540c\u4e00\u4e2a\u524d\u7f00\u4e0b\uff0c\u5982\u4e0b\u4e24\u6bb5\u4ee3\u7801\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 1 2 3 4 routes = \"/auth\" // Routes ( HttpRoute ( \"/login\" , ... ), HttpRoute ( \"/register\" , ... ), ) 1 2 3 4 routes = Routes ( HttpRoute ( \"/auth/login\" , ... ), HttpRoute ( \"/auth/register\" , ... ), ) \u6ce8\u610f\u4e8b\u9879 \u5728\u4f7f\u7528 routes = \"prefix\" // Routes(......) \u4e4b\u540e\u518d\u8c03\u7528 @routes.http \u7b49\u65b9\u6cd5\u6ce8\u518c\u8def\u7531\u65f6\uff0c\u5e76\u4e0d\u4f1a\u7ed9\u540e\u7eed\u7684\u8def\u7531\u81ea\u52a8\u52a0\u4e0a \"prefix\" \u524d\u7f00\u3002\u4f60\u5e94\u5f53\u5728\u4e00\u4e2a\u8def\u7531\u5206\u7ec4\u5185\u6240\u6709\u8def\u7531\u6ce8\u518c\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u8fdb\u884c \"prefix\" // routes \u8fd0\u7b97\u3002 \u8def\u7531\u62d3\u5c55 \u901a\u8fc7\u6784\u5efa\u8def\u7531\u5bf9\u8c61\u7684\u5e8f\u5217\uff08 Sequence[BaseRoute] \uff09\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u559c\u7231\u7684\u8def\u7531\u6ce8\u518c\u65b9\u5f0f\uff0c\u5728\u6700\u7ec8\u90fd\u4f1a\u5408\u5e76\u8fdb Radix Tree \u91cc\u3002 FileRoutes 1 from indexpy.routing.extensions import FileRoutes \u8fd9\u4e5f\u662f Index.py \u6b64\u9879\u76ee\u7684\u547d\u540d\u6765\u6e90\u4e4b\u4e00\u3002 FileRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5e8f\u5217\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u67d0\u4e00\u4e2a module \u4e0b\u6240\u6709\u7684 .py \u6587\u4ef6\u4e00\u4e00\u5bf9\u5e94\u5230\u5176\u76f8\u5bf9\u8def\u5f84\u76f8\u540c\u7684\u8def\u7531\u3002 \u4e2d\u95f4\u4ef6\u5b9a\u4e49 __init__.py \u4e2d\u540d\u4e3a HTTPMiddleware \u7684\u5bf9\u8c61\u5c06\u88ab\u4f5c\u4e3a HTTP \u4e2d\u95f4\u4ef6\u3001 SocketMiddleware \u5c06\u88ab\u4f5c\u4e3a WebSocket \u4e2d\u95f4\u4ef6\uff0c\u5e76\u4f5c\u7528\u4e8e\u540c\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u8def\u7531\u3002 \u5904\u7406\u5668\u5b9a\u4e49 \u9664\u4e86 __init__.py \u6587\u4ef6\u4ee5\u5916\u7684 .py \u6587\u4ef6\u4e2d\uff0c\u540d\u4e3a HTTP \u7684\u5bf9\u8c61\uff08\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u5747\u53ef\uff0c\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u5c06\u88ab\u89c6\u4e3a HTTP \u5904\u7406\u5668\uff0c\u540d\u4e3a Socket \u7684\u5bf9\u8c61\uff08\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u5747\u53ef\uff0c\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u5c06\u88ab\u89c6\u4e3a WebSocket \u5904\u7406\u5668\u3002 \u8def\u7531\u540d\u79f0 \u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u540d\u79f0\u4e3a name \u7684\u5b57\u7b26\u4e32\u5c06\u4f5c\u4e3a\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u8def\u7531\u540d\u79f0\u3002 FileRoutes \u540c\u6837\u62e5\u6709 namespace \u53c2\u6570\uff0c\u5e76\u4e14\u62e5\u6709\u540c\u6837\u7684\u4f5c\u7528\u3002 \u6620\u5c04\u89c4\u5219 module/filename.py \u6587\u4ef6\u5c06\u5bf9\u5e94\u8def\u7531 /filename \uff0c module/dirname/filename.py \u5c06\u5bf9\u5e94 /dirname/filename \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6587\u4ef6\u6620\u5c04\u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219\uff1a module/**/index.py \u5c06\u8d1f\u8d23\u5904\u7406 /**/ \u8def\u5f84\u7684\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u5939\u540d\u4fee\u6539\u4e3a module/{name}.py \u4ee5\u6b64\u63a5\u53d7\u8def\u5f84\u53c2\u6570\u3002 \u53ef\u4ee5\u4e3a FileRoutes \u8bbe\u7f6e suffix \u53c2\u6570\uff0c\u7ed9\u6bcf\u4e2a\u8def\u7531\u52a0\u4e0a\u540e\u7f00\uff0c\u8b6c\u5982 suffix=\".php\" \u8fd9\u5c06\u4f7f\u8def\u5f84\u770b\u8d77\u6765\u5f88\u50cf PHP \ud83d\ude00\u3002 MultimethodRoutes 1 from indexpy.routing.extensions import MultimethodRoutes MultimethodRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5e8f\u5217\uff0c\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u518c\u8def\u7531\uff0c\u5728\u4e0d\u663e\u5f0f\u4f7f\u7528\u7c7b\u7684\u60c5\u51b5\u4e0b\u62c6\u5206\u540c\u4e00\u4e2a PATH \u4e0b\u7684\u4e0d\u540c\u65b9\u6cd5\u5230\u591a\u4e2a\u51fd\u6570\u4e2d\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5747\u4e0e Routes \u76f8\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from indexpy import Index from indexpy.routing.extensions import MultimethodRoutes routes = MultimethodRoutes () @routes . http . get ( \"/user\" ) async def list_user (): pass @routes . http . post ( \"/user\" ) async def create_user (): pass @routes . http . delete ( \"/user\" ) async def delete_user (): pass","title":"Route"},{"location":"route.html#_1","text":"","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"route.html#_2","text":"\u4e0e bottle/flask \u4e4b\u7c7b\u7684\u6846\u67b6\u4e00\u6837\uff0cIndex-py \u652f\u6301\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u8def\u7531\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\uff0c name \u662f\u8def\u7531\u540d\u79f0\uff0c\u8fd9\u5728\u53cd\u5411\u67e5\u627e\u8def\u7531\u65f6\u4f1a\u8d77\u5230\u4f5c\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) async def hello (): ... @app . router . websocket ( \"/hello\" , name = \"hello_ws\" ) async def hello_ws (): ... \u5982\u679c name \u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u88ab\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u7684 __name__ \u5c5e\u6027\u3002 \u5982\u679c\u6307\u5b9a\u8def\u7531\u7684 name \u4e3a None \uff0c\u5219\u65e0\u6cd5\u901a\u8fc7 name \u67e5\u627e\u5230\u8be5\u8def\u7531\u3002","title":"\u4f7f\u7528\u88c5\u9970\u5668"},{"location":"route.html#_3","text":"\u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u8def\u7531\u7533\u660e\u65b9\u5f0f\u662f\u5982\u4e0b\u65b9\u6cd5\u7684\u5feb\u6377\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () async def hello (): return \"hello world\" async def hello_ws (): ... ( app . router << HttpRoute ( \"/hello\" , hello , name = \"hello\" ) << SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ) ) Index-py \u7684\u8def\u7531\u5bf9\u8c61\u6709\u4e24\u79cd\uff0c\u5206\u522b\u5bf9\u5e94 Http \u548c WebSocket \u65b9\u6cd5\u3002 1 2 3 4 5 # Http HttpRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) # WebSocket SocketRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) path \u6307\u5b9a\u8def\u7531\u80fd\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32 endpoint \u6307\u5b9a\u8def\u7531\u5bf9\u5e94\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 name \u4e3a\u8def\u7531\u6307\u5b9a\u540d\u79f0\uff0c name \u4e3a None \u65f6\uff0c\u6b64\u8def\u7531\u5c06\u6ca1\u6709\u540d\u79f0\uff1b name \u4e3a \"\" \u65f6\uff0c\u5c06\u81ea\u52a8\u8bfb\u53d6 endpoint.__name__ \u4f5c\u4e3a\u8def\u7531\u540d\u79f0\u3002","title":"\u8def\u7531\u5bf9\u8c61"},{"location":"route.html#_4","text":"\u4f7f\u7528\u8def\u7531\u5bf9\u8c61\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 endpoint\uff0cIndex-py \u4f1a\u81ea\u52a8\u4e3a\u5176\u6ce8\u518c\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u7528\u4e8e\u5904\u7406\u90e8\u5206\u53c2\u6570\u7684\u81ea\u52a8\u6821\u9a8c\u548c\u6ce8\u5165\u3002","title":"\u9884\u5904\u7406"},{"location":"route.html#_5","text":"\u4f60\u53ef\u4ee5\u5bf9\u8def\u7531\u5bf9\u8c61\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u8fd9\u5c06\u4f1a\u4f5c\u7528\u5230 endpoint \u4e0a\uff0c\u4f46\u4e0e\u76f4\u63a5\u5bf9 endpoint \u4f7f\u7528\u88c5\u9970\u5668\u4e0d\u540c\u7684\u662f\u5b83\u4f5c\u7528\u4e8e Index-py \u9884\u5904\u7406\u540e\u7684 endpoint \u4e0a\u3002 \u4f60\u53ef\u4ee5\u5728\u6ce8\u518c\u7684\u4e2d\u95f4\u4ef6\u91cc\u6355\u6349\u5230\u53ef\u80fd\u629b\u51fa\u7684\u53c2\u6570\u6821\u9a8c\u5f02\u5e38\u3002 \u5728\u672c\u6587\u6863\u91cc\uff0c\u8fd9\u6837\u6ce8\u518c\u7684\u88c5\u9970\u5668\u88ab\u79f0\u4e3a\u4e2d\u95f4\u4ef6\u3002\u201c\u4e2d\u95f4\u4ef6\u201d\u8fd9\u4e00\u540d\u79f0\u4e3b\u8981\u662f\u4e3a\u4e86\u6cbf\u7528\u5176\u4ed6\u6846\u67b6\u4e2d\u7684\u8bf4\u6cd5\u3002 1 HttpRoute ( ... ) @ decorator \u50cf\u6ce8\u518c\u666e\u901a\u7684\u88c5\u9970\u5668\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u6ce8\u518c\u591a\u4e2a\uff1b\u6267\u884c\u987a\u5e8f\u4e5f\u4e00\u6837\uff0c\u7531\u8fdc\u5230\u8fd1\u7684\u6267\u884c\u3002 1 HttpRoute ( ... ) @ decorator1 @ decorator2 @ decorator3 \u5e76\u4e14\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u5728\u4f7f\u7528\u88c5\u9970\u5668\u8fdb\u884c\u8def\u7531\u6ce8\u518c\u65f6\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u5176\u6267\u884c\u987a\u5e8f\u540c\u6837\u662f\u7531\u53f3\u5230\u5de6\u3002 1 2 @app . router . http ( \"/path\" , middlewares = [ decorator1 , decorator2 , decorator3 ]) async def path (): ...","title":"\u4e2d\u95f4\u4ef6"},{"location":"route.html#_6","text":"\u6307\u5b9a\u652f\u6301 GET \u65b9\u6cd5\u65f6\uff0cHEAD \u5c06\u88ab\u81ea\u52a8\u5141\u8bb8\u3002 \u9650\u5b9a\u4e86\u8bf7\u6c42\u65b9\u6cd5\u540e\uff0cOPTIONS \u7684\u8bf7\u6c42\u5c06\u88ab\u81ea\u52a8\u5904\u7406\u3002\u53cd\u4e4b\uff0c\u4f60\u9700\u8981\u81ea\u884c\u5904\u7406 OPTIONS \u65b9\u6cd5\u3002 \u5728\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u65f6\u53ef\u4ee5\u76f4\u63a5\u9650\u5b9a\u8be5\u8def\u7531\u80fd\u591f\u63a5\u53d7\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4ee5\u4e0b\u4e94\u79cd HTTP \u65b9\u6cd5\u7684\u9650\u5b9a\u3002\u5982\u679c\u4f60\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from indexpy import Index app = Index () @app . router . http . get ( \"/get\" ) async def need_get (): ... @app . router . http . post ( \"/post\" ) async def need_post (): ... @app . router . http . put ( \"/put\" ) async def need_put (): ... @app . router . http . patch ( \"/patch\" ) async def need_patch (): ... @app . router . http . delete ( \"/delete\" ) async def need_delete (): ... \u5982\u4e0a\u4ee3\u7801\u662f\u5728\u5185\u90e8\u4f7f\u7528\u4e86 required_method \u88c5\u9970\u5668\u6765\u8fbe\u5230\u9650\u5b9a\u8bf7\u6c42\u65b9\u6cd5\u7684\u76ee\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u624b\u52a8\u6ce8\u518c\u88c5\u9970\u5668\uff0c\u8fd9\u5c06\u80fd\u9650\u5b9a\u66f4\u591a\u79cd\u7c7b\u7684\u8bf7\u6c42\u3002\u4ee3\u7801\u6837\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from indexpy import Index , required_method app = Index () @app . router . http ( \"/get\" ) @required_method ( \"GET\" ) async def need_get (): ... @app . router . http ( \"/connect\" ) @required_method ( \"CONNECT\" ) async def need_connect (): ...","title":"\u9650\u5b9a\u8bf7\u6c42\u65b9\u6cd5"},{"location":"route.html#_7","text":"Index-py \u540c\u6837\u652f\u6301\u7c7b\u4f3c\u4e8e Django \u7684\u5217\u8868\u5f0f\u5199\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute async def hello (): return \"hello world\" async def hello_ws (): ... app = Index ( routes = [ HttpRoute ( \"/hello\" , hello , name = \"hello\" ), SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ), ])","title":"\u5217\u8868\u5f0f\u6ce8\u518c"},{"location":"route.html#_8","text":"\u4f7f\u7528 {name:type} \u53ef\u4ee5\u6807\u6ce8\u8def\u5f84\u53c2\u6570\uff0c\u76ee\u524d\u652f\u6301\u7684\u7c7b\u578b\u6709 str \u3001 int \u3001 decimal \u3001 date \u3001 uuid \u548c path \u3002 \u5982\u679c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u4e3a str \uff0c\u53ef\u4ee5\u5ffd\u7565\u6389 :str \uff0c\u76f4\u63a5\u4f7f\u7528 {name} \u3002 str \u4e0d\u80fd\u5339\u914d\u5230 / \uff0c\u5982\u679c\u9700\u8981\u5339\u914d / \u8bf7\u4f7f\u7528 path \u3002 path \u662f\u6781\u4e3a\u7279\u6b8a\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u53ea\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u7684\u6700\u540e\uff0c\u5e76\u4e14\u80fd\u5339\u914d\u5230\u6240\u6709\u7684\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 from indexpy import Index , request app = Index () @app . router . http ( \"/{username:str}\" ) async def what_is_your_name (): return request . path_params [ \"username\" ]","title":"\u8def\u5f84\u53c2\u6570"},{"location":"route.html#_9","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7531\u8def\u7531\u540d\u79f0\u53cd\u5411\u751f\u6210\u5bf9\u5e94\u7684 URL \u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 app.router.url_for \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 from indexpy import Index , request app = Index () @app . router . http ( \"/hello\" , name = \"hello\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-with-name\" ) async def hello (): return f \"hello { request . path_params . get ( 'name' ) } \" assert app . router . url_for ( \"hello\" ) == \"/hello\" assert app . router . url_for ( \"hello-with-name\" , { \"name\" : \"Aber\" }) == \"/hello/Aber\" \u53cd\u5411\u67e5\u627e\u4e2d\uff0c websocket \u4e0e http \u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u901a\u8fc7 protocol \u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u67e5\u627e\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3a http \u3002","title":"\u53cd\u5411\u67e5\u627e"},{"location":"route.html#_10","text":"\u5f53\u9700\u8981\u628a\u67d0\u4e00\u4e9b\u8def\u7531\u5f52\u4e3a\u4e00\u7ec4\u65f6\uff0c\u53ef\u4f7f\u7528 Routes \u5bf9\u8c61\u3002 Routes \u5bf9\u8c61\u62e5\u6709 .http \u548c .websocket \u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u88c5\u9970\u5668\u65b9\u5f0f\u6ce8\u518c\u8def\u7531\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0e app.router \u76f8\u540c\u3002 Routes \u4e5f\u540c\u6837\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u4f3c\u4e8e Django \u4e00\u6837\u7684\u8def\u7531\u7533\u660e\u65b9\u5f0f\uff0c\u793a\u4f8b\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 from indexpy.routing import Routes , HttpRoute async def hello ( request ): return \"hello world\" routes = Routes ( HttpRoute ( \"/hello\" , hello ), ) \u4f7f\u7528 << \u8fd0\u7b97\u7b26\u5373\u53ef\u6ce8\u518c Routes \u4e2d\u6240\u6709\u8def\u7531\u7ed9 app.router \uff0c\u5e76\u4e14\u8fd9\u4e00\u8fd0\u7b97\u7684\u8fd4\u56de\u7ed3\u679c\u662f app.router \uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\u3002 1 2 3 4 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes app . router << app1_routes << app2_routes \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u521d\u59cb\u5316 Index \u5bf9\u8c61\u65f6\u4f20\u5165\u3002 1 2 3 4 5 from indexpy import Index from .app1.urls import routes as app1_routes app = Index ( routes = app1_routes )","title":"\u8def\u7531\u5206\u7ec4"},{"location":"route.html#_11","text":"Routes \u53ef\u4ee5\u8f7b\u677e\u548c\u5176\u4ed6 Routes \u7ec4\u5408\u8d77\u6765\u3002 1 2 3 from .app1.urls import routes as app1_routes routes = Routes ( ... ) << app1_routes \u5e76\u4e14 << \u7684\u7ed3\u679c\u662f\u8fd0\u7b97\u5de6\u4fa7\u7684 Routes \u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u5b83\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 2 3 4 5 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes Routes () << app1_routes << app2_routes \u4f60\u4e5f\u53ef\u4ee5\u5408\u5e76\u4e24\u4e2a Routes \u6210\u4e3a\u4e00\u4e2a\u65b0\u7684 Routes \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u4e2d\u4e00\u4e2a\u5408\u5e76\u5230\u53e6\u4e00\u4e2a\u91cc\u3002 1 2 3 4 5 from .app1.urls import routes as app1_routes from .app2.urls import routes as app2_routes new_routes = app1_routes + app2_routes","title":"\u8def\u7531\u7ec4\u5408"},{"location":"route.html#_12","text":"\u4f60\u53ef\u4ee5\u4e3a Routes \u8bbe\u7f6e namespace \u53c2\u6570\uff0c\u8fd9\u5c06\u5728 Routes \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6bcf\u4e2a\u8def\u7531\u540d\u79f0\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u524d\u52a0\u4e0a namespace: \uff0c\u4ee5\u6b64\u6765\u907f\u514d\u4e0d\u540c\u540d\u79f0\u7a7a\u95f4\u5185\u7684\u8def\u7531\u540d\u79f0\u51b2\u7a81\u3002 1 routes = Routes ( ... , namespace = \"namespace\" ) \u5728\u4f7f\u7528 app.router.url_for \u65f6\u4e0d\u8981\u5fd8\u8bb0\u52a0\u4e0a\u8def\u7531\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u524d\u7f00\u3002","title":"\u540d\u79f0\u7a7a\u95f4"},{"location":"route.html#_13","text":"\u901a\u8fc7 Routes \u4f60\u53ef\u4ee5\u4e3a\u6574\u7ec4\u8def\u7531\u6ce8\u518c\u4e00\u4e2a\u6216\u591a\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4ee5\u4e0b\u4e3a\u7b80\u5355\u7684\u6837\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def one_http_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper def one_socket_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper routes = Routes ( ... , http_middlewares = [ one_http_middleware ], socket_middlewares = [ one_socket_middleware ], ) \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u6765\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4e0e\u4e0a\u4f8b\u7684\u7ed3\u679c\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 routes = Routes ( ... ) @routes . http_middleware def one_http_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper @routes . socket_middleware def one_socket_middleware ( endpoint ): async def wrapper (): return await endpoint () return wrapper","title":"\u4e2d\u95f4\u4ef6\u6ce8\u518c"},{"location":"route.html#_14","text":"\u6709\u65f6\u5019\u67d0\u4e00\u7ec4\u7684\u8def\u7531\u6211\u4eec\u5e0c\u671b\u653e\u5230\u540c\u4e00\u4e2a\u524d\u7f00\u4e0b\uff0c\u5982\u4e0b\u4e24\u6bb5\u4ee3\u7801\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 1 2 3 4 routes = \"/auth\" // Routes ( HttpRoute ( \"/login\" , ... ), HttpRoute ( \"/register\" , ... ), ) 1 2 3 4 routes = Routes ( HttpRoute ( \"/auth/login\" , ... ), HttpRoute ( \"/auth/register\" , ... ), ) \u6ce8\u610f\u4e8b\u9879 \u5728\u4f7f\u7528 routes = \"prefix\" // Routes(......) \u4e4b\u540e\u518d\u8c03\u7528 @routes.http \u7b49\u65b9\u6cd5\u6ce8\u518c\u8def\u7531\u65f6\uff0c\u5e76\u4e0d\u4f1a\u7ed9\u540e\u7eed\u7684\u8def\u7531\u81ea\u52a8\u52a0\u4e0a \"prefix\" \u524d\u7f00\u3002\u4f60\u5e94\u5f53\u5728\u4e00\u4e2a\u8def\u7531\u5206\u7ec4\u5185\u6240\u6709\u8def\u7531\u6ce8\u518c\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u8fdb\u884c \"prefix\" // routes \u8fd0\u7b97\u3002","title":"\u516c\u5171\u524d\u7f00"},{"location":"route.html#_15","text":"\u901a\u8fc7\u6784\u5efa\u8def\u7531\u5bf9\u8c61\u7684\u5e8f\u5217\uff08 Sequence[BaseRoute] \uff09\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u559c\u7231\u7684\u8def\u7531\u6ce8\u518c\u65b9\u5f0f\uff0c\u5728\u6700\u7ec8\u90fd\u4f1a\u5408\u5e76\u8fdb Radix Tree \u91cc\u3002","title":"\u8def\u7531\u62d3\u5c55"},{"location":"route.html#fileroutes","text":"1 from indexpy.routing.extensions import FileRoutes \u8fd9\u4e5f\u662f Index.py \u6b64\u9879\u76ee\u7684\u547d\u540d\u6765\u6e90\u4e4b\u4e00\u3002 FileRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5e8f\u5217\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u67d0\u4e00\u4e2a module \u4e0b\u6240\u6709\u7684 .py \u6587\u4ef6\u4e00\u4e00\u5bf9\u5e94\u5230\u5176\u76f8\u5bf9\u8def\u5f84\u76f8\u540c\u7684\u8def\u7531\u3002","title":"FileRoutes"},{"location":"route.html#_16","text":"__init__.py \u4e2d\u540d\u4e3a HTTPMiddleware \u7684\u5bf9\u8c61\u5c06\u88ab\u4f5c\u4e3a HTTP \u4e2d\u95f4\u4ef6\u3001 SocketMiddleware \u5c06\u88ab\u4f5c\u4e3a WebSocket \u4e2d\u95f4\u4ef6\uff0c\u5e76\u4f5c\u7528\u4e8e\u540c\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u8def\u7531\u3002","title":"\u4e2d\u95f4\u4ef6\u5b9a\u4e49"},{"location":"route.html#_17","text":"\u9664\u4e86 __init__.py \u6587\u4ef6\u4ee5\u5916\u7684 .py \u6587\u4ef6\u4e2d\uff0c\u540d\u4e3a HTTP \u7684\u5bf9\u8c61\uff08\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u5747\u53ef\uff0c\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u5c06\u88ab\u89c6\u4e3a HTTP \u5904\u7406\u5668\uff0c\u540d\u4e3a Socket \u7684\u5bf9\u8c61\uff08\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u5747\u53ef\uff0c\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u5c06\u88ab\u89c6\u4e3a WebSocket \u5904\u7406\u5668\u3002","title":"\u5904\u7406\u5668\u5b9a\u4e49"},{"location":"route.html#_18","text":"\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u540d\u79f0\u4e3a name \u7684\u5b57\u7b26\u4e32\u5c06\u4f5c\u4e3a\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u8def\u7531\u540d\u79f0\u3002 FileRoutes \u540c\u6837\u62e5\u6709 namespace \u53c2\u6570\uff0c\u5e76\u4e14\u62e5\u6709\u540c\u6837\u7684\u4f5c\u7528\u3002","title":"\u8def\u7531\u540d\u79f0"},{"location":"route.html#_19","text":"module/filename.py \u6587\u4ef6\u5c06\u5bf9\u5e94\u8def\u7531 /filename \uff0c module/dirname/filename.py \u5c06\u5bf9\u5e94 /dirname/filename \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6587\u4ef6\u6620\u5c04\u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219\uff1a module/**/index.py \u5c06\u8d1f\u8d23\u5904\u7406 /**/ \u8def\u5f84\u7684\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u5939\u540d\u4fee\u6539\u4e3a module/{name}.py \u4ee5\u6b64\u63a5\u53d7\u8def\u5f84\u53c2\u6570\u3002 \u53ef\u4ee5\u4e3a FileRoutes \u8bbe\u7f6e suffix \u53c2\u6570\uff0c\u7ed9\u6bcf\u4e2a\u8def\u7531\u52a0\u4e0a\u540e\u7f00\uff0c\u8b6c\u5982 suffix=\".php\" \u8fd9\u5c06\u4f7f\u8def\u5f84\u770b\u8d77\u6765\u5f88\u50cf PHP \ud83d\ude00\u3002","title":"\u6620\u5c04\u89c4\u5219"},{"location":"route.html#multimethodroutes","text":"1 from indexpy.routing.extensions import MultimethodRoutes MultimethodRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5e8f\u5217\uff0c\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u518c\u8def\u7531\uff0c\u5728\u4e0d\u663e\u5f0f\u4f7f\u7528\u7c7b\u7684\u60c5\u51b5\u4e0b\u62c6\u5206\u540c\u4e00\u4e2a PATH \u4e0b\u7684\u4e0d\u540c\u65b9\u6cd5\u5230\u591a\u4e2a\u51fd\u6570\u4e2d\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5747\u4e0e Routes \u76f8\u540c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from indexpy import Index from indexpy.routing.extensions import MultimethodRoutes routes = MultimethodRoutes () @routes . http . get ( \"/user\" ) async def list_user (): pass @routes . http . post ( \"/user\" ) async def create_user (): pass @routes . http . delete ( \"/user\" ) async def delete_user (): pass","title":"MultimethodRoutes"},{"location":"websocket.html","text":"WebSocket \u5904\u7406\u5668 \u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a WebSocket \u5904\u7406\u5668\u3002 \u51fd\u6570\u5904\u7406\u5668 \u5728 WebSocket \u5904\u7406\u5668\u7684\u5f00\u59cb\uff0c\u5fc5\u987b\u8c03\u7528 await websocket.accept() \uff0c\u5728\u5904\u7406\u5668\u9000\u51fa\u65f6\u5fc5\u987b\u8c03\u7528 await websocket.close(CLOSE_CODE) \u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import websocket async def simple_echo (): try : await websocket . accept () while True : message = await websocket . receive_json () await websocket . send_json ( message ) finally : await websocket . close ( 1000 ) \u7c7b\u5904\u7406\u5668 \u4e0e HTTP \u7c7b\u5904\u7406\u5668\u7c7b\u4f3c\uff0cWebSocket \u7c7b\u5904\u7406\u5668\u53ef\u4ee5\u4ece indexpy.SocketView \u7ee7\u627f\u800c\u6765\u3002 \u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u51e0\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"anystr\" \u3001 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 WebSocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002\u9ed8\u8ba4\u4e3a anystr \u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a WebSocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await websocket.accept() \u6765\u63a5\u53d7\u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u6b64\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed\u8fde\u63a5\u3002 \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570 WebSocket \u5bf9\u8c61 \u6bcf\u4e2a WebSocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a indexpy.requests.WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_bytes / send_bytes : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0cWebSocket \u5bf9\u8c61\u8fd8\u62e5\u6709 Request \u5bf9\u8c61\u76f8\u540c\u7684\u90e8\u5206\u5c5e\u6027\u3002 URL \u901a\u8fc7 websocket.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a websocket.url.path , websocket.url.port , websocket.url.scheme Path Parameters websocket.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002 Headers websocket.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 websocket.headers.keys() / websocket.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002 Query Parameters websocket.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a websocket.query_params['search'] Client Address websocket.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: websocket.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: websocket.client.port \u3002 \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002 Cookies websocket.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a websocket.cookies.get('mycookie') State \u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 websocket.state \u7528\u4e8e\u5b58\u50a8\u3002 1 2 3 4 5 websocket . state . user = User ( name = \"Alice\" ) # \u5199 user_name = websocket . state . user . name # \u8bfb del websocket . state . user # \u5220","title":"WebSocket"},{"location":"websocket.html#websocket","text":"\u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a WebSocket \u5904\u7406\u5668\u3002","title":"WebSocket \u5904\u7406\u5668"},{"location":"websocket.html#_1","text":"\u5728 WebSocket \u5904\u7406\u5668\u7684\u5f00\u59cb\uff0c\u5fc5\u987b\u8c03\u7528 await websocket.accept() \uff0c\u5728\u5904\u7406\u5668\u9000\u51fa\u65f6\u5fc5\u987b\u8c03\u7528 await websocket.close(CLOSE_CODE) \u3002 1 2 3 4 5 6 7 8 9 10 11 from indexpy import websocket async def simple_echo (): try : await websocket . accept () while True : message = await websocket . receive_json () await websocket . send_json ( message ) finally : await websocket . close ( 1000 )","title":"\u51fd\u6570\u5904\u7406\u5668"},{"location":"websocket.html#_2","text":"\u4e0e HTTP \u7c7b\u5904\u7406\u5668\u7c7b\u4f3c\uff0cWebSocket \u7c7b\u5904\u7406\u5668\u53ef\u4ee5\u4ece indexpy.SocketView \u7ee7\u627f\u800c\u6765\u3002 \u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u51e0\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"anystr\" \u3001 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 WebSocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002\u9ed8\u8ba4\u4e3a anystr \u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a WebSocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await websocket.accept() \u6765\u63a5\u53d7\u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u6b64\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed\u8fde\u63a5\u3002 \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570","title":"\u7c7b\u5904\u7406\u5668"},{"location":"websocket.html#websocket_1","text":"\u6bcf\u4e2a WebSocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a indexpy.requests.WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_bytes / send_bytes : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0cWebSocket \u5bf9\u8c61\u8fd8\u62e5\u6709 Request \u5bf9\u8c61\u76f8\u540c\u7684\u90e8\u5206\u5c5e\u6027\u3002","title":"WebSocket \u5bf9\u8c61"},{"location":"websocket.html#url","text":"\u901a\u8fc7 websocket.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a websocket.url.path , websocket.url.port , websocket.url.scheme","title":"URL"},{"location":"websocket.html#path-parameters","text":"websocket.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002","title":"Path Parameters"},{"location":"websocket.html#headers","text":"websocket.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 websocket.headers.keys() / websocket.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002","title":"Headers"},{"location":"websocket.html#query-parameters","text":"websocket.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a websocket.query_params['search']","title":"Query Parameters"},{"location":"websocket.html#client-address","text":"websocket.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: websocket.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: websocket.client.port \u3002 \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002","title":"Client Address"},{"location":"websocket.html#cookies","text":"websocket.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a websocket.cookies.get('mycookie')","title":"Cookies"},{"location":"websocket.html#state","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 websocket.state \u7528\u4e8e\u5b58\u50a8\u3002 1 2 3 4 5 websocket . state . user = User ( name = \"Alice\" ) # \u5199 user_name = websocket . state . user . name # \u8bfb del websocket . state . user # \u5220","title":"State"}]}